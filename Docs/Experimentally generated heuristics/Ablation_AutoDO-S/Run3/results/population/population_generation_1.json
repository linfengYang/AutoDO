[
     {
          "name": "commit_units_by_priority_dispatch",
          "algorithm": "1. Classify units into forced-on (min uptime/shutdown constraints), forced-off (min downtime), and free units.\n2. Free units are split into previously on/off. Calculate cost rates per MW at min power for both groups (including startup cost for cold units).\n3. Form candidate list: force-on units plus free units sorted by cost rates.\n4. Build committed set by adding candidates in ascending cost order until capacity can meet load, while ensuring total minimum output <= load.\n5. For units not in the committed set, set u_i=0 and p_i=0.\n6. Perform constrained economic dispatch for committed units to minimize cost while satisfying power limits and ramp constraints:\n   - Use lambda iteration to find optimal generation levels\n   - Adjust outputs to exactly match load if needed\n7. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef commit_units_by_priority_dispatch(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    u = np.zeros(n_units)\n    p = np.zeros(n_units)\n    \n    # Determine force-on and force-off status for each unit\n    force_on = []\n    force_off = []\n    free_units = []\n    \n    for i, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        t_i0 = unit['t_i_0']\n        p_i0 = unit['p_i_0']\n        \n        # Forced on if online and doesn't meet min-up time or exceeds shutdown capacity\n        if u_i0 == 1 and (t_i0 < unit['t_on_min_i'] or p_i0 > unit['p_shut_i']):\n            force_on.append(i)\n        # Forced off if offline and doesn't meet min-down time\n        elif u_i0 == 0 and abs(t_i0) < unit['t_off_min_i']:\n            force_off.append(i)\n        else:\n            free_units.append(i)\n    \n    # Calculate power ranges for units\n    low_bound = np.zeros(n_units)\n    high_bound = np.zeros(n_units)\n    \n    for i, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        p_i0 = unit['p_i_0']\n        \n        if u_i0 == 1:  # Previously online\n            low_bound[i] = max(unit['p_min_i'], p_i0 - unit['p_down_i'])\n            high_bound[i] = min(unit['p_max_i'], p_i0 + unit['p_up_i'])\n        else:  # Previously offline\n            low_bound[i] = unit['p_min_i']\n            high_bound[i] = min(unit['p_max_i'], unit['p_start_i'])\n    \n    # Classify free units into previously on/off\n    free_on = []\n    free_off = []\n    for i in free_units:\n        if units_info[i]['u_i_0'] == 1:\n            free_on.append(i)\n        else:\n            free_off.append(i)\n    \n    # Calculate cost rate per MW for free units\n    def cost_rate(i, include_startup):\n        unit = units_info[i]\n        cost = unit['a_i'] + unit['b_i'] * unit['p_min_i'] + unit['c_i'] * (unit['p_min_i'] ** 2)\n        if include_startup:\n            cost += unit['s_i']\n        return cost / unit['p_min_i']\n    \n    # Create candidate list sorted by cost rate\n    candidates = []\n    \n    # Free units previously on: no startup cost\n    for i in free_on:\n        if units_info[i]['p_i_0'] <= units_info[i]['p_shut_i']:  # Can be turned off\n            candidates.append((cost_rate(i, False), i))\n    \n    # Free units previously off: include startup cost\n    for i in free_off:\n        candidates.append((cost_rate(i, True), i))\n    \n    # Sort candidates by cost rate (ascending)\n    candidates.sort(key=lambda x: x[0])\n    candidate_ids = [idx for (_, idx) in candidates]\n    \n    # Start with force-on units as must-commit\n    committed_set = set(force_on)\n    total_min = sum(low_bound[i] for i in force_on)\n    total_max = sum(high_bound[i] for i in force_on)\n    \n    # Add free units until capacity meets load\n    for i in candidate_ids:\n        if total_max >= current_load:\n            break\n        new_min = total_min + low_bound[i]\n        if new_min <= current_load:  # Only add if min constraint still satisfied\n            committed_set.add(i)\n            total_min = new_min\n            total_max += high_bound[i]\n    \n    # Set commitment states\n    for i in range(n_units):\n        if i in committed_set:\n            u[i] = 1\n        else:\n            u[i] = 0\n            p[i] = 0.0\n    \n    # Prepare for economic dispatch\n    if committed_set:\n        a = []\n        b = []\n        c = []\n        lb = []\n        ub = []\n        idx_map = []\n        \n        for i in committed_set:\n            unit = units_info[i]\n            a.append(unit['a_i'])\n            b.append(unit['b_i'])\n            c.append(unit['c_i'])\n            lb.append(low_bound[i])\n            ub.append(high_bound[i])\n            idx_map.append(i)\n        \n        # Economic dispatch parameters\n        a = np.array(a)\n        b = np.array(b)\n        c = np.array(c)\n        lb = np.array(lb)\n        ub = np.array(ub)\n        \n        # Initialize lambda boundaries\n        lambda_low = np.min(2 * c * lb + b)\n        lambda_high = np.max(2 * c * ub + b)\n        epsilon = 1e-5\n        max_iter = 100\n        p_committed = np.zeros(len(committed_set))\n        \n        # Lambda iteration\n        for _ in range(max_iter):\n            lambda_mid = (lambda_low + lambda_high) / 2\n            p_temp = (lambda_mid - b) / (2 * c)\n            p_temp = np.clip(p_temp, lb, ub)\n            total = np.sum(p_temp)\n            \n            if total < current_load:\n                lambda_low = lambda_mid\n            else:\n                lambda_high = lambda_mid\n            \n            if abs(lambda_high - lambda_low) < epsilon:\n                p_committed = p_temp\n                break\n        \n        # Correct total power if needed\n        total_power = np.sum(p_committed)\n        error = current_load - total_power\n        \n        # Distribute error to units with highest sensitivity\n        while abs(error) > epsilon:\n            candidates = []\n            for j in range(len(committed_set)):\n                if error > 0 and p_committed[j] < ub[j]:\n                    # Under-generation: increase most efficient unit\n                    inc_cost = 2 * c[j] * p_committed[j] + b[j]\n                    candidates.append((inc_cost, j))\n                elif error < 0 and p_committed[j] > lb[j]:\n                    # Over-generation: decrease least efficient unit\n                    inc_cost = 2 * c[j] * p_committed[j] + b[j]\n                    candidates.append((inc_cost, j))\n            \n            if not candidates:\n                break\n                \n            # Find best candidate for adjustment\n            if error > 0:\n                candidate_idx = min(candidates, key=lambda x: x[0])[1]\n                max_adjust = ub[candidate_idx] - p_committed[candidate_idx]\n                adjust = min(max_adjust, error)\n                p_committed[candidate_idx] += adjust\n            else:\n                candidate_idx = max(candidates, key=lambda x: x[0])[1]\n                max_adjust = p_committed[candidate_idx] - lb[candidate_idx]\n                adjust = min(max_adjust, -error)\n                p_committed[candidate_idx] -= adjust\n            \n            error = current_load - np.sum(p_committed)\n        \n        # Assign committed outputs\n        for j, unit_idx in enumerate(idx_map):\n            p[unit_idx] = p_committed[j]\n    \n    return np.array([u, p])",
          "from": null,
          "gap_power_rate": 0.005428536,
          "gap_price_rate": 0.0087811077,
          "fitness": 0.0071048218
     },
     {
          "name": "solve_rolling_uc",
          "algorithm": "1. Classify units into forced-on, forced-off, and free based on minimum up/down times and shutdown ramp constraints.\n   - Forced-on: Units that were online in the previous period and either haven't satisfied minimum up-time or their previous output exceeds the shutdown capacity.\n   - Forced-off: Units that were offline in the previous period and haven't satisfied minimum down-time.\n   - Free: All other units eligible for commitment decisions.\n2. Initialize the committed set with forced-on units. Calculate their feasible power outputs considering ramp constraints.\n3. For free units, calculate average cost per MW at minimum output, including amortized startup costs for offline units.\n4. Sort free units by average cost in ascending order and add them to the committed set until total maximum output meets or exceeds the current load and total minimum output is less than or equal to the load.\n5. If total minimum output exceeds load after step 4, remove the most expensive free units (highest average cost) until feasible.\n6. Perform constrained economic dispatch on the committed set using lambda iteration to minimize production costs while respecting power bounds and ramp constraints.\n7. Set uncommitted units to off state with zero output.\n8. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef solve_rolling_uc(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    \n    # Classify units into forced-on, forced-off, and free\n    forced_on_units = []\n    forced_off_units = []\n    free_units = []\n    \n    for unit in units_info:\n        if unit['u_i_0'] == 1:  # Was online\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (unit['p_i_0'] > unit['p_shut_i']):\n                forced_on_units.append(unit)\n            else:\n                free_units.append(unit)\n        else:  # Was offline\n            if -unit['t_i_0'] < unit['t_off_min_i']:\n                forced_off_units.append(unit)\n            else:\n                free_units.append(unit)\n    \n    # Helper function to compute feasible power range\n    def get_feasible_range(unit, will_commit):\n        if not will_commit:\n            return (0, 0)\n        if unit['u_i_0'] == 1:  # Was online, remains on\n            min_out = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            max_out = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:  # Turning on\n            min_out = unit['p_min_i']\n            max_out = min(unit['p_max_i'], unit['p_start_i'])\n        return (min_out, max_out)\n    \n    # Initialize committed set with forced-on units\n    committed_set = []\n    total_min = 0\n    total_max = 0\n    \n    for unit in forced_on_units:\n        min_u, max_u = get_feasible_range(unit, True)\n        unit['_min_current'] = min_u\n        unit['_max_current'] = max_u\n        total_min += min_u\n        total_max += max_u\n        committed_set.append(unit)\n    \n    # Calculate average cost for free units\n    for unit in free_units:\n        min_p = unit['p_min_i']\n        if unit['u_i_0'] == 1:  # Already online\n            total_cost = unit['a_i'] + unit['b_i'] * min_p + unit['c_i'] * (min_p ** 2)\n        else:  # Offline, include startup cost\n            total_cost = unit['a_i'] + unit['s_i'] + unit['b_i'] * min_p + unit['c_i'] * (min_p ** 2)\n        unit['_avg_cost'] = total_cost / min_p if min_p > 0 else float('inf')\n    \n    # Sort free units by average cost\n    sorted_free_units = sorted(free_units, key=lambda x: x['_avg_cost'])\n    \n    # Add free units to committed set in cost order\n    new_committed = []\n    for unit in sorted_free_units:\n        if total_max >= current_load and total_min <= current_load:\n            break\n        min_u, max_u = get_feasible_range(unit, True)\n        candidate_min = total_min + min_u\n        candidate_max = total_max + max_u\n        \n        # Always add if needed for capacity, check min later\n        unit['_min_current'] = min_u\n        unit['_max_current'] = max_u\n        total_min = candidate_min\n        total_max = candidate_max\n        new_committed.append(unit)\n        if total_max >= current_load and total_min <= current_load:\n            break\n    \n    committed_set += new_committed\n    \n    # Remove expensive units if minimum output exceeds load\n    if total_min > current_load:\n        # Sort new_committed by cost descending\n        new_committed_sorted = sorted(new_committed, key=lambda x: x['_avg_cost'], reverse=True)\n        temp_min = total_min\n        temp_max = total_max\n        to_remove = []\n        for unit in new_committed_sorted:\n            if temp_min <= current_load:\n                break\n            temp_min -= unit['_min_current']\n            temp_max -= unit['_max_current']\n            to_remove.append(unit)\n        # Update committed set and totals\n        for unit in to_remove:\n            new_committed.remove(unit)\n            committed_set.remove(unit)\n            total_min -= unit['_min_current']\n            total_max -= unit['_max_current']\n    \n    # Economic dispatch via lambda iteration\n    u_list = np.zeros(n_units)\n    p_list = np.zeros(n_units)\n    \n    if committed_set:\n        # Get bounds for lambda\n        lows = []\n        highs = []\n        for unit in committed_set:\n            lows.append(unit['b_i'] + 2 * unit['c_i'] * unit['_min_current'])\n            highs.append(unit['b_i'] + 2 * unit['c_i'] * unit['_max_current'])\n        low_lam = min(lows) - 1.0\n        high_lam = max(highs) + 1.0\n        \n        # Lambda iteration\n        tol = 1e-5\n        max_iter = 1000\n        for _ in range(max_iter):\n            lam = (low_lam + high_lam) / 2.0\n            total_p = 0.0\n            dispatch_vals = []\n            for unit in committed_set:\n                p_i = (lam - unit['b_i']) / (2 * unit['c_i'])\n                p_i = max(unit['_min_current'], min(unit['_max_current'], p_i))\n                dispatch_vals.append(p_i)\n                total_p += p_i\n            \n            if abs(total_p - current_load) < tol:\n                break\n            elif total_p < current_load:\n                low_lam = lam\n            else:\n                high_lam = lam\n        \n        # Assign dispatch values\n        for unit, p_val in zip(committed_set, dispatch_vals):\n            idx = units_info.index(unit)\n            u_list[idx] = 1\n            p_list[idx] = p_val\n    \n    # Set uncommitted units to off\n    for unit in forced_off_units + free_units:\n        if unit not in committed_set:\n            idx = units_info.index(unit)\n            u_list[idx] = 0\n            p_list[idx] = 0\n    \n    return np.array([u_list, p_list])",
          "from": "crossover",
          "gap_power_rate": 0.0054285376,
          "gap_price_rate": 0.0087811082,
          "fitness": 0.0071048229
     },
     {
          "name": "commit_units_by_marginal_cost",
          "algorithm": "1. Preprocess units to determine forced commitment states based on minimum up/down times, shutdown ramp limits, and previous state.\n2. Compute available capacity from initially committed units.\n3. Turn on additional candidate units (not forced off) based on two-period average incremental cost until available capacity meets or exceeds current load.\n4. Turn off non-essential candidate units (those not forced on) based on highest operating cost to minimize total cost.\n5. Perform economic dispatch using bisection method to allocate load to committed units, respecting ramp limits and power bounds.\n\n",
          "code": "import numpy as np\n\ndef commit_units_by_marginal_cost(units_info, load):\n    current_load = load[0]\n    \n    forced_committed = []\n    candidate_off = []\n    candidate_on = []\n    \n    # Step 1: Determine forced commitment and candidate units\n    for idx, unit in enumerate(units_info):\n        u_i_0 = unit['u_i_0']\n        t_i_0 = unit['t_i_0']\n        p_i_0 = unit['p_i_0']\n        p_shut_i = unit['p_shut_i']\n        t_on_min_i = unit['t_on_min_i']\n        t_off_min_i = unit['t_off_min_i']\n        \n        if u_i_0 == 1:\n            if t_i_0 < t_on_min_i or p_i_0 > p_shut_i:\n                forced_committed.append(idx)\n            else:\n                candidate_off.append(idx)\n        else:\n            if abs(t_i_0) < t_off_min_i:\n                continue\n            else:\n                candidate_on.append(idx)\n    \n    # Helper function to get available capacity\n    def get_available_capacity(unit_indices):\n        total = 0.0\n        for idx in unit_indices:\n            unit = units_info[idx]\n            if unit['u_i_0'] == 1:\n                total += min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:\n                total += min(unit['p_max_i'], unit['p_start_i'])\n        return total\n    \n    # Initially committed units (forced on and candidate_off)\n    committed_units = forced_committed + candidate_off\n    total_available = get_available_capacity(committed_units)\n    \n    # Step 2: Turn on candidate units if needed\n    candidate_on_info = []\n    for idx in candidate_on:\n        unit = units_info[idx]\n        s_i = unit['s_i']\n        a_i = unit['a_i']\n        b_i = unit['b_i']\n        c_i = unit['c_i']\n        p_min_i = unit['p_min_i']\n        \n        cost_current = s_i + a_i + b_i * p_min_i + c_i * (p_min_i ** 2)\n        cost_next = a_i + b_i * p_min_i + c_i * (p_min_i ** 2)\n        total_cost = cost_current + cost_next\n        power_two_periods = 2 * p_min_i\n        aic_per_mw = total_cost / power_two_periods\n        \n        if unit['u_i_0'] == 1:\n            avail = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            avail = min(unit['p_max_i'], unit['p_start_i'])\n        \n        candidate_on_info.append((idx, aic_per_mw, avail))\n    \n    candidate_on_info.sort(key=lambda x: x[1])\n    \n    for idx, _, avail in candidate_on_info:\n        if total_available >= current_load:\n            break\n        total_available += avail\n        committed_units.append(idx)\n    \n    # Step 3: Turn off non-essential candidate_off units\n    candidate_off_info = []\n    for idx in candidate_off:\n        if idx not in committed_units:\n            continue\n        unit = units_info[idx]\n        min_power = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        cost = unit['a_i'] + unit['b_i'] * min_power + unit['c_i'] * min_power**2\n        if unit['u_i_0'] == 1:\n            avail = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            avail = min(unit['p_max_i'], unit['p_start_i'])\n        candidate_off_info.append((idx, cost, avail))\n    \n    candidate_off_info.sort(key=lambda x: x[1], reverse=True)\n    \n    new_committed = list(committed_units)\n    total_available_new = total_available\n    for idx, _, avail in candidate_off_info:\n        if (total_available_new - avail) >= current_load:\n            total_available_new -= avail\n            new_committed.remove(idx)\n    committed_units = new_committed\n    \n    # Prepare schedules array\n    num_units = len(units_info)\n    schedules = np.zeros((2, num_units))\n    for idx in committed_units:\n        schedules[0, idx] = 1\n    \n    # Step 4: Economic Dispatch\n    unit_bounds = []\n    for idx in committed_units:\n        unit = units_info[idx]\n        if unit['u_i_0'] == 1:\n            low_bound = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            high_bound = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            low_bound = unit['p_min_i']\n            high_bound = min(unit['p_max_i'], unit['p_start_i'])\n        unit_bounds.append((idx, low_bound, high_bound))\n    \n    low_total = sum(low for _, low, _ in unit_bounds)\n    high_total = sum(high for _, _, high in unit_bounds)\n    \n    # If load not feasible, use bounds\n    if current_load < low_total or current_load > high_total:\n        for idx, low, high in unit_bounds:\n            if current_load < low_total:\n                schedules[1, idx] = low\n            else:\n                schedules[1, idx] = high\n        return schedules\n    \n    # Dispatch parameters\n    dispatch_list = []\n    min_ic = float('inf')\n    max_ic = -float('inf')\n    \n    for idx, low, high in unit_bounds:\n        unit = units_info[idx]\n        b_i = unit['b_i']\n        c_i = unit['c_i']\n        ic_low = b_i + 2 * c_i * low\n        ic_high = b_i + 2 * c_i * high\n        min_ic = min(min_ic, ic_low)\n        max_ic = max(max_ic, ic_high)\n        dispatch_list.append((idx, b_i, c_i, low, high))\n    \n    # Lambda iteration\n    lambda_low = min_ic\n    lambda_high = max_ic\n    p_values = [low for _, _, _, low, _ in dispatch_list]\n    \n    if abs(high_total - low_total) > 1e-6:\n        for _ in range(100):\n            lambda_mid = (lambda_low + lambda_high) / 2.0\n            total_power = 0.0\n            new_p_values = []\n            for idx, b_i, c_i, low, high in dispatch_list:\n                if c_i == 0:\n                    if lambda_mid < b_i:\n                        p_i = low\n                    else:\n                        p_i = high\n                else:\n                    p_i = (lambda_mid - b_i) / (2 * c_i)\n                    p_i = max(low, min(high, p_i))\n                new_p_values.append(p_i)\n                total_power += p_i\n            \n            if abs(total_power - current_load) < 1e-3:\n                p_values = new_p_values\n                break\n            if total_power < current_load:\n                lambda_low = lambda_mid\n            else:\n                lambda_high = lambda_mid\n            p_values = new_p_values\n    \n    # Assign dispatch results\n    for (idx, _, _, _, _), power in zip(dispatch_list, p_values):\n        schedules[1, idx] = power\n    \n    return schedules",
          "from": null,
          "gap_power_rate": 0.0054685553,
          "gap_price_rate": 0.0092084548,
          "fitness": 0.0073385051
     },
     {
          "name": "commit_units_by_marginal_cost",
          "algorithm": "1. Identify must-run units that cannot be turned off due to min-up time, shutdown ramp limits, or ramp-down constraints.\n2. Identify must-off units that cannot be turned on due to min-down time constraints.\n3. Sort eligible candidate units by average cost per MW (includes startup cost for off units, excludes for on units).\n4. Commit must-run units and add candidate units in cost-ascending order until capacity meets current load.\n5. For committed units, calculate dispatch bounds based on operational constraints (ramps, startup capacities).\n6. Perform economic dispatch using lambda iteration to allocate load to units within bounds.\n7. Return commitment states and power outputs.\n\n",
          "code": "import numpy as np\n\ndef commit_units_by_marginal_cost(units_info, load):\n    must_run = set()\n    # Identify must-run units\n    for unit in units_info:\n        if unit['u_i_0'] == 1:\n            if unit['t_i_0'] < unit['t_on_min_i']:\n                must_run.add(id(unit))\n            elif unit['p_i_0'] > unit['p_shut_i'] or unit['p_i_0'] > unit['p_down_i']:\n                must_run.add(id(unit))\n    \n    # Helper to check must-off units\n    def is_must_off(unit):\n        if unit['u_i_0'] == 0 and -unit['t_i_0'] < unit['t_off_min_i']:\n            return True\n        return False\n    \n    # Build candidate units list\n    candidate_units = []\n    for unit in units_info:\n        uid = id(unit)\n        if uid in must_run:\n            continue\n        if is_must_off(unit):\n            continue\n        candidate_units.append(unit)\n    \n    # Calculate average cost for commitment priority\n    def avg_cost(unit):\n        if unit['u_i_0'] == 1:  # On unit: only fuel cost\n            return (unit['b_i'] * unit['p_max_i'] + unit['c_i'] * unit['p_max_i']**2) / unit['p_max_i']\n        else:  # Off unit: fuel cost + startup\n            return (unit['s_i'] + unit['b_i'] * unit['p_max_i'] + unit['c_i'] * unit['p_max_i']**2) / unit['p_max_i']\n    \n    # Sort by average cost\n    candidate_units_sorted = sorted(candidate_units, key=avg_cost)\n    \n    # Build final commitment set\n    committed_units = set(must_run)\n    total_capacity = 0.0\n    # Add must-run capacity\n    for unit in units_info:\n        if id(unit) in must_run:\n            if unit['u_i_0'] == 1:\n                total_capacity += unit['p_max_i']\n            else:  # Starting unit has constrained capacity\n                total_capacity += min(unit['p_max_i'], unit['p_start_i'])\n    # Add candidate units until load met\n    for unit in candidate_units_sorted:\n        if total_capacity >= load[0]:\n            break\n        if unit['u_i_0'] == 1:  # Already on\n            added_capacity = unit['p_max_i']\n        else:  # Starting unit\n            added_capacity = min(unit['p_max_i'], unit['p_start_i'])\n        committed_units.add(id(unit))\n        total_capacity += added_capacity\n    \n    # Prepare for economic dispatch\n    committed_list = []\n    bounds = []\n    cost_params = []\n    for unit in units_info:\n        if id(unit) in committed_units:\n            # Calculate dispatch bounds\n            if unit['u_i_0'] == 1:  # Was on\n                lb = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                ub = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:  # Was off (starting)\n                lb = unit['p_min_i']\n                ub = min(unit['p_max_i'], unit['p_start_i'], unit['p_up_i'])\n            committed_list.append(unit)\n            bounds.append((lb, ub))\n            cost_params.append((unit['b_i'], unit['c_i']))\n    \n    if not committed_list:  # No units committed\n        schedules = np.zeros((2, len(units_info)))\n        return schedules\n    \n    # Lambda iteration for economic dispatch\n    low_lam = -10000.0\n    high_lam = 10000.0\n    tol = 0.01\n    n_iters = 100\n    for _ in range(n_iters):\n        mid_lam = (low_lam + high_lam) / 2\n        total_power = 0.0\n        for (b, c), (lb, ub) in zip(cost_params, bounds):\n            # Calculate unconstrained dispatch\n            if c == 0:\n                p = ub if mid_lam >= b else lb\n            else:\n                p = (mid_lam - b) / (2 * c)\n            p = max(lb, min(ub, p))\n            total_power += p\n        \n        if abs(total_power - load[0]) < tol:\n            break\n        if total_power < load[0]:\n            low_lam = mid_lam\n        else:\n            high_lam = mid_lam\n    \n    # Calculate final dispatch values\n    dispatch = []\n    for (b, c), (lb, ub) in zip(cost_params, bounds):\n        if c == 0:\n            p = ub if mid_lam >= b else lb\n        else:\n            p = (mid_lam - b) / (2 * c)\n        p = max(lb, min(ub, p))\n        dispatch.append(p)\n    \n    # Map back to original units\n    schedule_u = []\n    schedule_p = []\n    idx = 0\n    for unit in units_info:\n        if id(unit) in committed_units:\n            schedule_u.append(1)\n            schedule_p.append(dispatch[idx])\n            idx += 1\n        else:\n            schedule_u.append(0)\n            schedule_p.append(0.0)\n    \n    schedules = np.array([schedule_u, schedule_p])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.0089824653,
          "gap_price_rate": 0.011717359,
          "fitness": 0.0103499122
     },
     {
          "name": "dynamic_priority_heuristic",
          "algorithm": "1. Enforce minimum up/down times and shutdown ramp constraints\n2. Calculate priority index for non-forced units: \n   - Active units: marginal cost at p_min_i\n   - Inactive units: marginal cost + amortized startup cost\n3. Commit units by priority order until total capacity \u2265 load\n4. Initialize outputs at feasible minimums considering ramping constraints\n5. Perform economic dispatch:\n   - Increase output for lowest marginal cost units with headroom\n   - Decrease output for highest marginal cost units with footroom\n   - Iterate until load is met within tolerance\n\n",
          "code": "import numpy as np\n\ndef dynamic_priority_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    forced_on = [False] * n_units\n    forced_off = [False] * n_units\n    \n    # Enforce constraints\n    for idx, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        t_i0 = unit['t_i_0']\n        p_i0 = unit['p_i_0']\n        t_on_min = unit['t_on_min_i']\n        t_off_min = unit['t_off_min_i']\n        p_shut = unit['p_shut_i']\n        \n        if u_i0 == 1:\n            if t_i0 < t_on_min or p_i0 > p_shut:\n                forced_on[idx] = True\n        else:\n            if abs(t_i0) < t_off_min:\n                forced_off[idx] = True\n    \n    u = [0] * n_units\n    p = [0] * n_units\n    \n    # Commit forced units\n    for idx in range(n_units):\n        if forced_on[idx]:\n            u[idx] = 1\n        if forced_off[idx]:\n            u[idx] = 0\n    \n    # Priority calculation\n    eligible_units = []\n    for idx in range(n_units):\n        if forced_on[idx] or forced_off[idx]:\n            continue\n        unit = units_info[idx]\n        p_min = unit['p_min_i']\n        if unit['u_i_0'] == 1:\n            priority = (unit['b_i'] + 2 * unit['c_i'] * p_min) / p_min\n        else:\n            amortized_startup = unit['s_i'] / (unit['t_on_min_i'] * p_min)\n            priority = (unit['b_i'] + 2 * unit['c_i'] * p_min) / p_min + amortized_startup\n        eligible_units.append((priority, idx))\n    \n    eligible_units.sort(key=lambda x: x[0])\n    \n    # Commit by priority\n    total_max = 0\n    for idx in range(n_units):\n        if u[idx] == 1:\n            unit = units_info[idx]\n            if unit['u_i_0'] == 1:\n                total_max += min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:\n                total_max += min(unit['p_max_i'], unit['p_start_i'], unit['p_up_i'])\n    \n    for priority, idx in eligible_units:\n        if total_max >= current_load:\n            break\n        u[idx] = 1\n        unit = units_info[idx]\n        if unit['u_i_0'] == 1:\n            total_max += min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            total_max += min(unit['p_max_i'], unit['p_start_i'], unit['p_up_i'])\n    \n    # Initialize outputs\n    total_power = 0\n    for idx in range(n_units):\n        if u[idx] == 1:\n            unit = units_info[idx]\n            if unit['u_i_0'] == 1:\n                lb = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                p[idx] = lb\n            else:\n                p[idx] = unit['p_min_i']\n            total_power += p[idx]\n    \n    # Economic dispatch\n    tolerance = 0.1\n    while abs(total_power - current_load) > tolerance:\n        if total_power < current_load:  # Need more power\n            min_mc = float('inf')\n            candidate = -1\n            max_inc = 0\n            for idx in range(n_units):\n                if u[idx] == 0:\n                    continue\n                unit = units_info[idx]\n                mc = 2 * unit['c_i'] * p[idx] + unit['b_i']\n                # Compute headroom\n                if unit['u_i_0'] == 1:\n                    ub = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n                else:\n                    ub = min(unit['p_max_i'], unit['p_start_i'], unit['p_up_i'])\n                headroom = ub - p[idx]\n                if headroom > tolerance and mc < min_mc:\n                    min_mc = mc\n                    candidate = idx\n                    max_inc = headroom\n            if candidate == -1:\n                break\n            inc = min(max_inc, current_load - total_power)\n            p[candidate] += inc\n            total_power += inc\n        \n        else:  # Need less power\n            max_mc = -float('inf')\n            candidate = -1\n            max_dec = 0\n            for idx in range(n_units):\n                if u[idx] == 0 or units_info[idx]['u_i_0'] == 0:\n                    continue\n                unit = units_info[idx]\n                mc = 2 * unit['c_i'] * p[idx] + unit['b_i']\n                lb = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                footroom = p[idx] - lb\n                if footroom > tolerance and mc > max_mc:\n                    max_mc = mc\n                    candidate = idx\n                    max_dec = footroom\n            if candidate == -1:\n                break\n            dec = min(max_dec, total_power - current_load)\n            p[candidate] -= dec\n            total_power -= dec\n    \n    return np.array([u, p])",
          "from": null,
          "gap_power_rate": 0.0055517872,
          "gap_price_rate": 0.0215854404,
          "fitness": 0.0135686138
     },
     {
          "name": "adaptive_priority_dispatch",
          "algorithm": "1. Identify forced online units (must be on due to minimum up-time or shutdown ramp constraints) and forced offline units (due to minimum down-time constraints)\n2. Calculate priority index for non-forced units based on marginal cost and amortized startup cost\n3. Commit forced online units, then add non-forced units by priority until total capacity \u2265 load\n4. Adjust committed set to ensure cumulative minimum output \u2264 load\n5. Initialize outputs at ramp-constrained minimums\n6. Perform economic dispatch via marginal cost-based load adjustment within power bounds\n7. Set offline units to u_i=0, p_i=0\n\n",
          "code": "import numpy as np\n\ndef adaptive_priority_dispatch(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    forced_on = [False] * n_units\n    forced_off = [False] * n_units\n    \n    # Identify forced on/off units\n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:\n            if unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']:\n                forced_on[i] = True\n        else:\n            if -unit['t_i_0'] < unit['t_off_min_i']:\n                forced_off[i] = True\n                \n    # Calculate priority for non-forced units\n    non_forced = []\n    for i, unit in enumerate(units_info):\n        if not forced_on[i] and not forced_off[i]:\n            if unit['u_i_0'] == 1:\n                priority = 2 * unit['c_i'] * unit['p_min_i'] + unit['b_i']\n            else:\n                priority = (unit['s_i'] / unit['p_min_i']) + (2 * unit['c_i'] * unit['p_min_i'] + unit['b_i'])\n            non_forced.append((i, priority))\n    non_forced.sort(key=lambda x: x[1])\n    \n    # Helper function to get output bounds\n    def get_bounds(i, unit):\n        if unit['u_i_0'] == 1:\n            min_out = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            max_out = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            return min_out, max_out\n        return unit['p_min_i'], min(unit['p_max_i'], unit['p_start_i'])\n    \n    # Initialize commitment and outputs\n    committed = set()\n    min_total = 0.0\n    max_total = 0.0\n    output_bounds = {}\n    \n    # Add forced-on units\n    for i, unit in enumerate(units_info):\n        if forced_on[i]:\n            min_out, max_out = get_bounds(i, unit)\n            min_total += min_out\n            max_total += max_out\n            output_bounds[i] = (min_out, max_out)\n            committed.add(i)\n    \n    # Add non-forced units by priority\n    added = []\n    for idx, _ in non_forced:\n        min_out, max_out = get_bounds(idx, units_info[idx])\n        min_total += min_out\n        max_total += max_out\n        added.append(idx)\n        committed.add(idx)\n        output_bounds[idx] = (min_out, max_out)\n        if max_total >= current_load:\n            break\n    \n    # Adjust commitment if min_total exceeds load\n    while min_total > current_load and added:\n        idx = added.pop()\n        min_out, max_out = output_bounds[idx]\n        min_total -= min_out\n        max_total -= max_out\n        committed.remove(idx)\n        if min_total <= current_load:\n            break\n    \n    # Initialize outputs\n    outputs = {}\n    for i in range(n_units):\n        if i in committed:\n            unit = units_info[i]\n            outputs[i] = output_bounds[i][0]\n        else:\n            outputs[i] = 0.0\n    \n    # Calculate deficit\n    total_output = sum(outputs.values())\n    deficit = current_load - total_output\n    \n    # Economic dispatch within bounds\n    tolerance = 1e-5\n    iteration = 0\n    max_iter = 100\n    \n    while abs(deficit) > tolerance and iteration < max_iter:\n        candidates = []\n        for i in committed:\n            lb, ub = output_bounds[i]\n            current = outputs[i]\n            if deficit > 0 and current < ub:\n                marginal_cost = 2 * units_info[i]['c_i'] * current + units_info[i]['b_i']\n                candidates.append((i, marginal_cost, ub - current))\n            elif deficit < 0 and current > lb:\n                marginal_cost = 2 * units_info[i]['c_i'] * current + units_info[i]['b_i']\n                candidates.append((i, marginal_cost, current - lb))\n        \n        if not candidates:\n            break\n        \n        # Sort by cost (ascending for deficit, descending for surplus)\n        candidates.sort(key=lambda x: x[1], reverse=(deficit < 0))\n        \n        adjusted = False\n        for i, mc, headroom in candidates:\n            adjustment = min(headroom, abs(deficit))\n            if deficit > 0:\n                outputs[i] += adjustment\n                deficit -= adjustment\n            else:\n                outputs[i] -= adjustment\n                deficit += adjustment\n            adjusted = True\n            if abs(deficit) < tolerance:\n                break\n        \n        if not adjusted:\n            break\n        iteration += 1\n    \n    # Prepare output arrays\n    u_out = []\n    p_out = []\n    for i, unit in enumerate(units_info):\n        u_out.append(1 if i in committed else 0)\n        p_out.append(outputs.get(i, 0.0))\n    \n    return np.array([u_out, p_out])",
          "from": "crossover",
          "gap_power_rate": 0.0068122882,
          "gap_price_rate": 0.0229258629,
          "fitness": 0.0148690756
     },
     {
          "name": "commit_units_priority_amortized",
          "algorithm": "1. Identify forced online units (must be on due to min up-time or shutdown ramp constraints)\n2. Identify forced offline units (due to min down-time)\n3. Classify remaining flexible units as online or offline\n4. Calculate power bounds for online units considering ramp constraints\n5. Start flexible offline units by priority if needed\n6. Economic dispatch among online units to meet load\n7. Set offline units to u_i=0, p_i=0\n\n",
          "code": "import numpy as np\n\ndef commit_units_priority_amortized(units_info, load):\n    n_units = len(units_info)\n    current_load = load[0]\n    forecast_load = load[1]  # Used in amortization calculation\n    \n    # Initialize output arrays\n    u_i = np.zeros(n_units, dtype=int)\n    p_i = np.zeros(n_units)\n    \n    # Initialize lists for classification\n    forced_on = []\n    forced_off = []\n    flexible_online = []\n    flexible_offline = []\n    online_indices = []\n    \n    # Classify units\n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:  # Unit was online\n            if unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']:\n                forced_on.append(i)\n                online_indices.append(i)\n            else:\n                flexible_online.append(i)\n                online_indices.append(i)\n        else:  # Unit was offline\n            if abs(unit['t_i_0']) < unit['t_off_min_i']:\n                forced_off.append(i)\n            else:\n                flexible_offline.append(i)\n    \n    # Prepare online units list and their bounds\n    online_units = forced_on + flexible_online\n    lower_bounds = []\n    upper_bounds = []\n    for i in online_units:\n        unit = units_info[i]\n        lb = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        ub = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        lower_bounds.append(lb)\n        upper_bounds.append(ub)\n    \n    # Calculate total min/max generation\n    total_min = sum(lower_bounds)\n    total_max = sum(upper_bounds)\n    \n    # Start additional units if needed\n    started_units = []\n    if total_max < current_load and flexible_offline:\n        # Sort flexible offline by amortized cost\n        amortized_costs = []\n        for i in flexible_offline:\n            unit = units_info[i]\n            periods = min(unit['t_on_min_i'], 2)\n            cost = (unit['s_i'] / periods + unit['a_i'] + \n                    unit['b_i'] * unit['p_min_i'] + \n                    unit['c_i'] * unit['p_min_i'] ** 2) / unit['p_min_i']\n            amortized_costs.append(cost)\n        \n        sorted_units = [i for _, i in sorted(zip(amortized_costs, flexible_offline))]\n        \n        for i in sorted_units:\n            if total_max >= current_load:\n                break\n            unit = units_info[i]\n            ub = min(unit['p_max_i'], unit['p_start_i'])\n            \n            online_units.append(i)\n            online_indices.append(i)\n            started_units.append(i)\n            \n            lower_bounds.append(unit['p_min_i'])\n            upper_bounds.append(ub)\n            \n            total_min += unit['p_min_i']\n            total_max += ub\n    \n    # Economic dispatch for online units\n    allocation = np.array(lower_bounds.copy())\n    residual = current_load - total_min\n    \n    # Case 1: Overproduction\n    if residual < 0:\n        allocation = np.array(lower_bounds)\n    # Case 2: Underproduction\n    elif current_load > total_max:\n        allocation = np.array(upper_bounds)\n    # Case 3: Dispatch needed\n    else:\n        # Sort by marginal cost\n        marginal_costs = []\n        for i, idx in enumerate(online_units):\n            unit = units_info[idx]\n            marginal_costs.append(unit['b_i'] + 2 * unit['c_i'] * allocation[i])\n        \n        sorted_idx = np.argsort(marginal_costs)\n        headroom = np.array(upper_bounds) - allocation\n        \n        for idx in sorted_idx:\n            if residual <= 0:\n                break\n            if headroom[idx] > residual:\n                allocation[idx] += residual\n                residual = 0\n            else:\n                allocation[idx] += headroom[idx]\n                residual -= headroom[idx]\n    \n    # Assign outputs\n    for i, idx in enumerate(online_units):\n        u_i[idx] = 1\n        p_i[idx] = allocation[i]\n    \n    # Create output array\n    schedules = np.vstack((u_i, p_i))\n    return schedules",
          "from": null,
          "gap_power_rate": 0.0001296784,
          "gap_price_rate": 0.0342821913,
          "fitness": 0.0172059349
     },
     {
          "name": "commit_units_heuristic",
          "algorithm": "1. Identify units that must remain off (down-time constraints) and others that are initially on.\n2. For units that are initially on:\n   - Compute min and max power outputs considering ramp constraints.\n   - Perform economic dispatch to meet as much current load as possible:\n     - If load <= total minimum output, set outputs to minimums.\n     - Else, distribute load by increasing output in order of incremental cost (2*c_i*p_i + b_i).\n     - Calculate gap (unmet load) after dispatch.\n3. For eligible candidate units (off but not must-off):\n   - Sort by cost metric: (s_i + 2*a_i + 2*b_i*p_min_i + 2*c_i*p_min_i**2) / (2*p_min_i)\n   - Turn on units in sorted order to cover gap, setting output as high as possible without exceeding gap.\n4. Set output for must-off units to 0.\n5. Return unit commitments and power outputs as numpy array.\n\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    current_load = load[0]\n    num_units = len(units_info)\n    \n    # Extract unit info into lists for easy access\n    a_i = [unit['a_i'] for unit in units_info]\n    b_i = [unit['b_i'] for unit in units_info]\n    c_i = [unit['c_i'] for unit in units_info]\n    u_i_0 = [unit['u_i_0'] for unit in units_info]\n    p_i_0 = [unit['p_i_0'] for unit in units_info]\n    t_i_0 = [unit['t_i_0'] for unit in units_info]\n    p_min_i = [unit['p_min_i'] for unit in units_info]\n    p_max_i = [unit['p_max_i'] for unit in units_info]\n    p_down_i = [unit['p_down_i'] for unit in units_info]\n    p_up_i = [unit['p_up_i'] for unit in units_info]\n    p_start_i = [unit['p_start_i'] for unit in units_info]\n    t_off_min_i = [unit['t_off_min_i'] for unit in units_info]\n    \n    # Step 1: Identify must-off units\n    must_off = []\n    for i in range(num_units):\n        if u_i_0[i] == 0:\n            if t_i_0[i] < 0 and -t_i_0[i] < t_off_min_i[i]:\n                must_off.append(True)\n            else:\n                must_off.append(False)\n        else:\n            must_off.append(False)\n    \n    # Initialize outputs\n    u_i = [1 if u_i_0[i]==1 else 0 for i in range(num_units)]\n    p_i = [0.0] * num_units\n    \n    # Dispatch units that were initially on\n    on_units = [i for i in range(num_units) if u_i_0[i]==1]\n    min_power = []\n    max_power = []\n    for idx in on_units:\n        min_output = max(p_min_i[idx], p_i_0[idx] - p_down_i[idx])\n        max_output = min(p_max_i[idx], p_i_0[idx] + p_up_i[idx])\n        min_power.append(min_output)\n        max_power.append(max_output)\n    \n    total_min_on = sum(min_power) if min_power else 0\n    total_max_on = sum(max_power) if max_power else 0\n    \n    # Dispatch on_units\n    if total_min_on > current_load:  # Overproduction\n        gap = 0\n        for i, idx in enumerate(on_units):\n            p_i[idx] = min_power[i]\n    else:\n        # Set target for on units\n        target = min(current_load, total_max_on)\n        if total_min_on < target:\n            # Need to distribute the load increase\n            incremental_cost = []\n            for i, idx in enumerate(on_units):\n                ic = 2 * c_i[idx] * min_power[i] + b_i[idx]\n                incremental_cost.append((ic, i))\n            incremental_cost.sort(key=lambda x: x[0])\n            \n            current_total = total_min_on\n            temp_p = min_power.copy()  # temporary dispatch values\n            for _, i in incremental_cost:\n                allocatable = min(max_power[i] - min_power[i], target - current_total)\n                if allocatable > 0:\n                    temp_p[i] += allocatable\n                    current_total += allocatable\n                if current_total >= target:\n                    break\n            # Assign temp_p to p_i\n            for i, idx in enumerate(on_units):\n                p_i[idx] = temp_p[i]\n        else:\n            for i, idx in enumerate(on_units):\n                p_i[idx] = min_power[i]\n        gap = max(0, current_load - target)\n    \n    # Candidate units: off, not must-off\n    candidate_set = [i for i in range(num_units) if u_i_0[i]==0 and not must_off[i]]\n    metric = []\n    for idx in candidate_set:\n        # Metric: (startup + cost for two periods at p_min) / (2 * p_min)\n        if p_min_i[idx] > 0:\n            startup = units_info[idx]['s_i']\n            cost_t = a_i[idx] + b_i[idx]*p_min_i[idx] + c_i[idx]*(p_min_i[idx]**2)\n            cost_t1 = a_i[idx] + b_i[idx]*p_min_i[idx] + c_i[idx]*(p_min_i[idx]**2)\n            metric_i = (startup + cost_t + cost_t1) / (2 * p_min_i[idx])\n            metric.append((metric_i, idx))\n        else:\n            metric.append((float('inf'), idx))\n    metric.sort(key=lambda x: x[0])\n    \n    # Cover gap with candidate units\n    for metric_val, idx in metric:\n        if gap <= 0:\n            break\n        min_output = p_min_i[idx]\n        max_output = min(p_max_i[idx], p_start_i[idx])\n        if max_output < min_output:  # Infeasible unit\n            continue\n        if gap >= max_output:\n            u_i[idx] = 1\n            p_i[idx] = max_output\n            gap -= max_output\n        elif gap >= min_output:\n            u_i[idx] = 1\n            p_i[idx] = gap\n            gap = 0\n    \n    # Build output array\n    schedules = np.array([u_i, p_i])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.000641108,
          "gap_price_rate": 0.0338750615,
          "fitness": 0.0172580847
     },
     {
          "name": "rolling_commitment_heuristic",
          "algorithm": "1. Classify units into must-on (cannot be shut down), must-off (cannot be started), and free units (can be adjusted)\n2. Initialize commitment: must-on + currently on free units\n3. Calculate total min and max power from committed units\n4. If min power > load, turn off free expensive units (ordered by avg cost at min power)\n5. If max power < load, turn on free cheap units (ordered by avg cost at min power including startup)\n6. Dispatch power to meet load: \n   - Initialize units to min possible output\n   - Distribute deficit in order of increasing marginal cost\n   - Respect ramping constraints and max power limits\n7. Return schedule (commitment states and power outputs)\n\n",
          "code": "import numpy as np\n\ndef rolling_commitment_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    must_on = []\n    must_off = []\n    free_units = []\n    committed = set()\n    \n    # Classify units and initial commitment\n    for i, unit in enumerate(units_info):\n        u0 = unit['u_i_0']\n        t0 = unit['t_i_0']\n        p0 = unit['p_i_0']\n        \n        if u0 == 1:\n            if t0 < unit['t_on_min_i'] or p0 > unit['p_shut_i']:\n                must_on.append(i)\n            else:\n                free_units.append(i)\n                committed.add(i)\n        else:\n            if t0 < 0 and -t0 < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_units.append(i)\n    \n    committed |= set(must_on)\n    free_on = [i for i in free_units if units_info[i]['u_i_0'] == 1]\n    free_off = [i for i in free_units if units_info[i]['u_i_0'] == 0]\n\n    # Calculate power ranges\n    def calc_power(i, com_set):\n        unit = units_info[i]\n        if i in com_set:\n            if unit['u_i_0'] == 1:\n                return (max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i']),\n                        min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i']))\n            else:\n                return (unit['p_min_i'], min(unit['p_max_i'], unit['p_start_i']))\n        return (0, 0)\n\n    min_pow, max_pow = 0, 0\n    for i in range(n_units):\n        mi, ma = calc_power(i, committed)\n        min_pow += mi\n        max_pow += ma\n\n    # Turn off expensive units if overcommitted\n    if min_pow > current_load:\n        off_candidates = [(i, *calc_power(i, committed)) for i in free_on if i not in must_on]\n        off_candidates.sort(key=lambda x: (units_info[x[0]]['a_i'] + units_info[x[0]]['b_i'] * x[1] + \n                                          units_info[x[0]]['c_i'] * x[1]**2) / x[1], reverse=True)\n        for i, mini, maxi in off_candidates:\n            if min_pow <= current_load:\n                break\n            new_min = min_pow - mini\n            new_max = max_pow - maxi\n            if new_max >= current_load:\n                committed.discard(i)\n                min_pow = new_min\n                max_pow = new_max\n\n    # Turn on cheap units if undercommitted\n    if max_pow < current_load:\n        on_candidates = []\n        for i in free_off:\n            unit = units_info[i]\n            min_i = unit['p_min_i']\n            max_i = min(unit['p_max_i'], unit['p_start_i'])\n            avg_cost = (unit['s_i'] + unit['a_i'] + unit['b_i'] * min_i + \n                        unit['c_i'] * min_i**2) / min_i\n            on_candidates.append((i, min_i, max_i, avg_cost))\n        on_candidates.sort(key=lambda x: x[3])\n        for i, min_i, max_i, _ in on_candidates:\n            if max_pow >= current_load:\n                break\n            committed.add(i)\n            min_pow += min_i\n            max_pow += max_i\n\n    # Initial dispatch to minimum possible\n    dispatch = np.zeros(n_units)\n    for i in range(n_units):\n        if i in committed:\n            if units_info[i]['u_i_0'] == 1:\n                dispatch[i] = max(units_info[i]['p_min_i'], \n                                 units_info[i]['p_i_0'] - units_info[i]['p_down_i'])\n            else:\n                dispatch[i] = units_info[i]['p_min_i']\n    \n    total = np.sum(dispatch)\n    deficit = current_load - total\n\n    # Ramp up units if needed\n    if deficit > 0:\n        ramp_candidates = []\n        for i in range(n_units):\n            if i in committed:\n                unit = units_info[i]\n                if unit['u_i_0'] == 1:\n                    max_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n                else:\n                    max_i = min(unit['p_max_i'], unit['p_start_i'])\n                if dispatch[i] < max_i:\n                    marginal = 2 * unit['c_i'] * dispatch[i] + unit['b_i']\n                    ramp_candidates.append((i, marginal, max_i - dispatch[i]))\n        \n        ramp_candidates.sort(key=lambda x: x[1])\n        for i, mc, available in ramp_candidates:\n            if deficit <= 0:\n                break\n            alloc = min(available, deficit)\n            dispatch[i] += alloc\n            deficit -= alloc\n\n    # Prepare schedule\n    u_state = [1 if i in committed else 0 for i in range(n_units)]\n    schedules = np.array([u_state, dispatch])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.0001296784,
          "gap_price_rate": 0.0346418817,
          "fitness": 0.0173857801
     },
     {
          "name": "adaptive_priority_commitment_dispatch",
          "algorithm": null,
          "code": "import numpy as np\n\ndef adaptive_priority_commitment_dispatch(units_info, load):\n    current_load = load[0]\n    num_units = len(units_info)\n    \n    # Classify units and store indices\n    forced_on_indices = []\n    forced_off_indices = []\n    free_on_indices = []\n    free_off_indices = []\n    \n    for idx, unit in enumerate(units_info):\n        a_i = unit['a_i']\n        b_i = unit['b_i']\n        c_i = unit['c_i']\n        u_i_0 = unit['u_i_0']\n        p_i_0 = unit['p_i_0']\n        t_i_0 = unit['t_i_0']\n        t_on_min_i = unit['t_on_min_i']\n        t_off_min_i = unit['t_off_min_i']\n        p_down_i = unit['p_down_i']\n        p_shut_i = unit['p_shut_i']\n        \n        if u_i_0 == 1:\n            if t_i_0 < t_on_min_i or p_i_0 > p_shut_i:\n                forced_on_indices.append(idx)\n            else:\n                free_on_indices.append(idx)\n        else:  # u_i_0 == 0\n            if t_i_0 < 0 and (-t_i_0) < t_off_min_i:\n                forced_off_indices.append(idx)\n            else:\n                free_off_indices.append(idx)\n    \n    # Calculate power bounds\n    low_bounds = {}\n    high_bounds = {}\n    total_min = 0\n    total_max = 0\n    \n    # Forced-on units\n    for idx in forced_on_indices:\n        unit = units_info[idx]\n        low_b = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        high_b = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        low_bounds[idx] = low_b\n        high_bounds[idx] = high_b\n        total_min += low_b\n        total_max += high_b\n    \n    # Free-on units\n    for idx in free_on_indices:\n        unit = units_info[idx]\n        low_b = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        high_b = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        low_bounds[idx] = low_b\n        high_bounds[idx] = high_b\n        total_min += low_b\n        total_max += high_b\n    \n    # Candidate units for turning off (from free-on) and on (from free-off)\n    candidate_off = []\n    for idx in free_on_indices:\n        unit = units_info[idx]\n        if unit['p_i_0'] <= unit['p_down_i']:\n            candidate_off.append(idx)\n    \n    candidate_on = []\n    for idx in free_off_indices:\n        unit = units_info[idx]\n        if unit['p_min_i'] <= unit['p_start_i']:\n            candidate_on.append(idx)\n    \n    # Adjust commitments for excess capacity\n    if total_min > current_load:\n        candidate_off_sorted = sorted(candidate_off, key=lambda idx: \n            (units_info[idx]['a_i'] + units_info[idx]['b_i'] * units_info[idx]['p_min_i'] + \n             units_info[idx]['c_i'] * (units_info[idx]['p_min_i']**2)) / units_info[idx]['p_min_i'], \n            reverse=True)\n        \n        for idx in candidate_off_sorted:\n            if total_min > current_load:\n                free_on_indices.remove(idx)\n                total_min -= low_bounds[idx]\n                total_max -= high_bounds[idx]\n    \n    # Adjust commitments for deficit capacity\n    if total_max < current_load:\n        candidate_on_sorted = sorted(candidate_on, key=lambda idx: \n            (units_info[idx]['s_i'] + units_info[idx]['a_i'] + units_info[idx]['b_i'] * units_info[idx]['p_min_i'] + \n             units_info[idx]['c_i'] * (units_info[idx]['p_min_i']**2)) / units_info[idx]['p_min_i'])\n        \n        for idx in candidate_on_sorted:\n            if total_max < current_load:\n                free_off_indices.remove(idx)\n                low_new = units_info[idx]['p_min_i']\n                high_new = min(units_info[idx]['p_max_i'], units_info[idx]['p_start_i'])\n                low_bounds[idx] = low_new\n                high_bounds[idx] = high_new\n                free_on_indices.append(idx)\n                total_min += low_new\n                total_max += high_new\n    \n    # Build committed set\n    committed_indices = forced_on_indices + free_on_indices\n    low_list = [low_bounds[i] for i in committed_indices]\n    high_list = [high_bounds[i] for i in committed_indices]\n    \n    if committed_indices:\n        # Lambda iteration for dispatch\n        b_list = [units_info[i]['b_i'] for i in committed_indices]\n        c_list = [units_info[i]['c_i'] for i in committed_indices]\n        \n        lamb_low = min(2 * c_list[i] * low_list[i] + b_list[i] for i in range(len(committed_indices)))\n        lamb_high = max(2 * c_list[i] * high_list[i] + b_list[i] for i in range(len(committed_indices)))\n        \n        num_iter = 100\n        p = np.zeros(len(committed_indices))\n        for _ in range(num_iter):\n            lamb_mid = (lamb_low + lamb_high) / 2\n            total_p = 0\n            for i in range(len(committed_indices)):\n                c = c_list[i]\n                b = b_list[i]\n                low = low_list[i]\n                high = high_list[i]\n                if c == 0:\n                    p_i = high if lamb_mid >= b else low\n                else:\n                    p_i = np.clip((lamb_mid - b) / (2 * c), low, high)\n                p[i] = p_i\n                total_p += p_i\n            \n            if abs(total_p - current_load) < 1e-5:\n                break\n            if total_p < current_load:\n                lamb_low = lamb_mid\n            else:\n                lamb_high = lamb_mid\n        \n        # Adjust for any deficit or surplus\n        deficit = current_load - total_p\n        if deficit > 1e-5:\n            indices = sorted(range(len(committed_indices)), key=lambda i: 2*c_list[i]*p[i] + b_list[i])\n            for i in indices:\n                if p[i] < high_list[i]:\n                    headroom = high_list[i] - p[i]\n                    inc = min(headroom, deficit)\n                    p[i] += inc\n                    deficit -= inc\n                    if deficit <= 1e-5:\n                        break\n        elif deficit < -1e-5:\n            deficit = -deficit\n            indices = sorted(range(len(committed_indices)), key=lambda i: -(2*c_list[i]*p[i] + b_list[i]))\n            for i in indices:\n                if p[i] > low_list[i]:\n                    footroom = p[i] - low_list[i]\n                    dec = min(footroom, deficit)\n                    p[i] -= dec\n                    deficit -= dec\n                    if deficit <= 1e-5:\n                        break\n    else:\n        p = []\n    \n    # Prepare output\n    schedules = np.zeros((2, num_units))\n    output_p = [0.0] * num_units\n    \n    for i, idx in enumerate(committed_indices):\n        output_p[idx] = p[i]\n    \n    for idx in range(num_units):\n        if idx in committed_indices:\n            schedules[0, idx] = 1\n            schedules[1, idx] = output_p[idx]\n    \n    return schedules",
          "from": "crossover",
          "gap_power_rate": 0.0001296798,
          "gap_price_rate": 0.0360463337,
          "fitness": 0.0180880068
     }
]