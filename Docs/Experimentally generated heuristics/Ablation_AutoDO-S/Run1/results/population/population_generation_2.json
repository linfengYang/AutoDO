[
     {
          "name": "refined_rolling_commitment",
          "algorithm": "1. Classify units into must-run (min up-time/shotdown ramp constraints), must-off (min down-time), free-on (online freely decommitable), and free-off (offline freely commitable)\n2. Commit must-run and free-on units\n3. Compute effective min/max outputs considering ramp constraints (ramp limits, startup/shutdown ramp limits)\n4. If total min output exceeds load:\n   - Decommit free-on units with largest min outputs until feasibility is restored\n5. If total max output is below load:\n   - Commit free-off units with lowest cost per MW at min output until capacity suffices\n6. Decommit unnecessary free-on units with highest operating cost at min output if feasible\n7. Dispatch committed units:\n   - If load <= total min: set to min outputs\n   - If load >= total max: set to max outputs\n   - Else: perform lambda iteration economic dispatch with clamped gradients\n   - Apply final adjustments to balance residual load\n8. Return schedules (u_i, p_i) for all units\n\n",
          "code": "import numpy as np\n\ndef refined_rolling_commitment(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    u = [0] * n_units\n    p = [0.0] * n_units\n    \n    # Initialize classification lists\n    must_on = []\n    free_on = []\n    free_off = []\n    min_eff = [0.0] * n_units\n    max_eff = [0.0] * n_units\n    \n    # Step 1: Classify units\n    for i, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        p_i0 = unit['p_i_0']\n        \n        if u_i0 == 1:\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (p_i0 > unit['p_shut_i']):\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:\n            if abs(unit['t_i_0']) < unit['t_off_min_i']:\n                continue  # must_off handled by omission\n            else:\n                free_off.append(i)\n    \n    # Initialize committed set\n    committed = set(must_on)\n    committed.update(free_on)\n    \n    # Step 2 & 3: Compute effective min/max outputs\n    for i, unit in enumerate(units_info):\n        if i in committed and unit['u_i_0'] == 1:\n            min_eff[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            max_eff[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        elif i in free_off:\n            min_eff[i] = unit['p_min_i']\n            max_eff[i] = min(unit['p_max_i'], unit['p_start_i'])\n        else:\n            min_eff[i] = 0.0\n            max_eff[i] = 0.0\n    \n    total_min = sum(min_eff[i] for i in committed)\n    total_max = sum(max_eff[i] for i in committed)\n    \n    # Step 4: Decommit free-on units if overcommitted\n    if total_min > current_load:\n        sorted_free_on = sorted(\n            [i for i in free_on if i in committed],\n            key=lambda i: min_eff[i],\n            reverse=True\n        )\n        for i in sorted_free_on:\n            cand_min = total_min - min_eff[i]\n            cand_max = total_max - max_eff[i]\n            if cand_min <= current_load <= cand_max:\n                committed.remove(i)\n                total_min = cand_min\n                total_max = cand_max\n            if total_min <= current_load:\n                break\n    \n    # Step 5: Commit free-off units if undercommitted\n    if total_max < current_load:\n        def cost_priority(i):\n            unit = units_info[i]\n            startup = unit['s_i']\n            prod_cost = unit['a_i'] + unit['b_i']*min_eff[i] + unit['c_i']*min_eff[i]**2\n            return (startup + prod_cost) / (min_eff[i] + 1e-9)\n        \n        sorted_free_off = sorted(\n            [i for i in free_off if i not in committed],\n            key=cost_priority\n        )\n        for i in sorted_free_off:\n            cand_min = total_min + min_eff[i]\n            cand_max = total_max + max_eff[i]\n            committed.add(i)\n            total_min = cand_min\n            total_max = cand_max\n            if total_max >= current_load:\n                break\n    \n    # Step 6: Decommit unnecessary free-on units by cost\n    def operating_cost(i):\n        unit = units_info[i]\n        return unit['a_i'] + unit['b_i']*min_eff[i] + unit['c_i']*min_eff[i]**2\n    \n    expensive_free_on = sorted(\n        [i for i in free_on if i in committed],\n        key=operating_cost,\n        reverse=True\n    )\n    for i in expensive_free_on:\n        cand_min = total_min - min_eff[i]\n        cand_max = total_max - max_eff[i]\n        if cand_min <= current_load <= cand_max:\n            committed.remove(i)\n            total_min = cand_min\n            total_max = cand_max\n    \n    # Recompute final constraints\n    for i in committed:\n        if units_info[i]['u_i_0'] == 1:\n            min_eff[i] = max(units_info[i]['p_min_i'], units_info[i]['p_i_0'] - units_info[i]['p_down_i'])\n            max_eff[i] = min(units_info[i]['p_max_i'], units_info[i]['p_i_0'] + units_info[i]['p_up_i'])\n        else:  # Started this period\n            min_eff[i] = units_info[i]['p_min_i']\n            max_eff[i] = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])\n    \n    total_min = sum(min_eff[i] for i in committed)\n    total_max = sum(max_eff[i] for i in committed)\n    \n    # Step 7: Dispatch\n    if current_load <= total_min:\n        for i in committed:\n            p[i] = min_eff[i]\n            u[i] = 1\n    elif current_load >= total_max:\n        for i in committed:\n            p[i] = max_eff[i]\n            u[i] = 1\n    else:  # Lambda iteration with clamping\n        # Initialize lambda bounds\n        low = float('inf')\n        high = -float('inf')\n        for i in committed:\n            unit = units_info[i]\n            low = min(low, unit['b_i'] + 2*unit['c_i']*min_eff[i])\n            high = max(high, unit['b_i'] + 2*unit['c_i']*max_eff[i])\n        \n        tol = 1e-3\n        max_iter = 1000\n        for _ in range(max_iter):\n            lambda_mid = (low + high) / 2.0\n            total_power = 0.0\n            for i in committed:\n                unit = units_info[i]\n                c_val = unit['c_i']\n                b_val = unit['b_i']\n                if c_val == 0:\n                    p_i = max_eff[i] if lambda_mid > b_val else min_eff[i]\n                else:\n                    p_i = (lambda_mid - b_val) / (2 * c_val)\n                    p_i = max(min_eff[i], min(max_eff[i], p_i))\n                p[i] = p_i\n                total_power += p_i\n            \n            if abs(total_power - current_load) < tol:\n                break\n            if total_power < current_load:\n                low = lambda_mid\n            else:\n                high = lambda_mid\n        \n        # Residual adjustment\n        total_power = sum(p[i] for i in committed)\n        residual = current_load - total_power\n        if abs(residual) > tol:\n            adjustments = []\n            for i in committed:\n                if residual > 0 and p[i] < max_eff[i]:\n                    headroom = max_eff[i] - p[i]\n                    marginal = units_info[i]['b_i'] + 2*units_info[i]['c_i']*p[i]\n                    adjustments.append((marginal, i, headroom))\n                elif residual < 0 and p[i] > min_eff[i]:\n                    headroom = p[i] - min_eff[i]\n                    marginal = units_info[i]['b_i'] + 2*units_info[i]['c_i']*p[i]\n                    adjustments.append((marginal, i, headroom))\n            \n            if residual > 0:\n                adjustments.sort(key=lambda x: x[0])\n            else:\n                adjustments.sort(key=lambda x: x[0], reverse=True)\n            \n            for _, i, headroom in adjustments:\n                delta = min(headroom, abs(residual)) * np.sign(residual)\n                p[i] += delta\n                residual -= delta\n                if abs(residual) < tol:\n                    break\n        for i in committed:\n            u[i] = 1\n    \n    # Set non-committed units\n    for i in range(n_units):\n        if i not in committed:\n            u[i] = 0\n            p[i] = 0.0\n    \n    schedules = np.zeros((2, n_units))\n    schedules[0, :] = u\n    schedules[1, :] = p\n    return schedules",
          "from": "mutation",
          "gap_power_rate": 0.0054286362,
          "gap_price_rate": 0.0091472287,
          "fitness": 0.0072879324
     },
     {
          "name": "commit_units_heuristic",
          "algorithm": "1. Identify must-run units that were online in the previous period and either haven't satisfied minimum up-time or exceeded shutdown capacity.\n2. Compute total minimum and available maximum capacity from must-run units considering ramp constraints.\n3. If total minimum exceeds load, set must-run units to their lower bounds (over-generation).\n4. If load is within must-run capacity, dispatch only must-run units to meet load.\n5. Otherwise, consider candidate units (non-must-run that can be turned on/left on) sorted by cost per MW at minimum output.\n6. Add cheapest candidates until total available capacity meets or exceeds load.\n7. Dispatch all committed units using lambda iteration to minimize cost while respecting ramp and output limits.\n8. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    u = [0] * n_units\n    p = [0.0] * n_units\n    \n    # Step 1: Identify must-run units\n    must_run = []\n    for idx, unit in enumerate(units_info):\n        u_i_0 = unit['u_i_0']\n        if u_i_0 == 1:  # was online\n            t_i_0 = unit['t_i_0']\n            t_on_min_i = unit['t_on_min_i']\n            p_i_0 = unit['p_i_0']\n            p_shut_i = unit['p_shut_i']\n            if t_i_0 < t_on_min_i or p_i_0 > p_shut_i:\n                must_run.append(idx)\n                u[idx] = 1\n    \n    # Step 2: Compute bounds for must-run units\n    total_min_must = 0.0\n    total_available_max_must = 0.0\n    bounds = {}\n    for idx in must_run:\n        unit = units_info[idx]\n        p_min_i = unit['p_min_i']\n        p_max_i = unit['p_max_i']\n        p_i_0 = unit['p_i_0']\n        p_up_i = unit['p_up_i']\n        p_down_i = unit['p_down_i']\n        \n        lb_i = max(p_min_i, p_i_0 - p_down_i)\n        ub_i = min(p_max_i, p_i_0 + p_up_i)\n        bounds[idx] = (lb_i, ub_i)\n        total_min_must += lb_i\n        total_available_max_must += ub_i\n    \n    # Step 3: Over-generation case\n    if total_min_must > current_load:\n        for idx in must_run:\n            lb_i, _ = bounds[idx]\n            p[idx] = lb_i\n        return np.array([u, p])\n    \n    # Step 4: Load within must-run capacity\n    if current_load <= total_available_max_must:\n        committed = must_run\n    else:\n        # Step 5: Prepare candidate units\n        candidate_units = []\n        for idx, unit in enumerate(units_info):\n            if idx in must_run:\n                continue\n            u_i_0 = unit['u_i_0']\n            t_i_0 = unit['t_i_0']\n            t_off_min_i = unit['t_off_min_i']\n            a_i = unit['a_i']\n            b_i = unit['b_i']\n            c_i = unit['c_i']\n            s_i = unit['s_i']\n            p_min_i = unit['p_min_i']\n            p_max_i = unit['p_max_i']\n            p_i_0 = unit['p_i_0']\n            p_up_i = unit['p_up_i']\n            p_down_i = unit['p_down_i']\n            p_start_i = unit['p_start_i']\n            \n            # Check if can be committed\n            if u_i_0 == 1:  # Type 2: online but not must-run\n                cost_per_MW = (a_i + b_i * p_min_i + c_i * p_min_i**2) / p_min_i\n                available_capacity = min(p_max_i, p_i_0 + p_up_i)\n                lb_i = max(p_min_i, p_i_0 - p_down_i)\n                candidate_units.append((cost_per_MW, idx, available_capacity, lb_i, 'type2'))\n            elif t_i_0 <= -t_off_min_i:  # Type 3: offline and can be turned on\n                cost_per_MW = (a_i + s_i + b_i * p_min_i + c_i * p_min_i**2) / p_min_i\n                available_capacity = min(p_max_i, p_start_i)\n                lb_i = p_min_i\n                candidate_units.append((cost_per_MW, idx, available_capacity, lb_i, 'type3'))\n        \n        # Sort by cost per MW\n        candidate_units.sort(key=lambda x: x[0])\n        committed_candidates = []\n        total_available_max = total_available_max_must\n        \n        # Step 6: Add candidates until capacity meets load\n        for cand in candidate_units:\n            if total_available_max >= current_load:\n                break\n            cost_per_MW, idx, available_capacity, lb_i, unit_type = cand\n            total_available_max += available_capacity\n            committed_candidates.append((idx, lb_i, available_capacity, unit_type))\n            u[idx] = 1  # Commit unit\n        \n        committed = must_run + [idx for (idx, _, _, _) in committed_candidates]\n        # Update bounds for candidate units\n        for cand in committed_candidates:\n            idx, lb_i, available_capacity, unit_type = cand\n            if unit_type == 'type2':\n                unit = units_info[idx]\n                p_i_0 = unit['p_i_0']\n                p_down_i = unit['p_down_i']\n                p_min_i = unit['p_min_i']\n                lb_i = max(p_min_i, p_i_0 - p_down_i)\n                ub_i = min(unit['p_max_i'], p_i_0 + unit['p_up_i'])\n            else:  # type3\n                ub_i = min(unit['p_max_i'], unit['p_start_i'])\n            bounds[idx] = (lb_i, ub_i)\n    \n    # Step 7: Dispatch for all committed units\n    lb_list = []\n    ub_list = []\n    b_coeffs = []\n    c_coeffs = []\n    committed_idxs = []\n    total_lb = 0.0\n    total_ub = 0.0\n    \n    for idx in committed:\n        lb_i, ub_i = bounds.get(idx, (0.0, 0.0))\n        if idx not in must_run and u[idx] == 1:\n            unit = units_info[idx]\n            if unit['u_i_0'] == 1:  # Type2\n                p_i_0 = unit['p_i_0']\n                lb_i = max(unit['p_min_i'], p_i_0 - unit['p_down_i'])\n                ub_i = min(unit['p_max_i'], p_i_0 + unit['p_up_i'])\n            else:  # Type3\n                lb_i = unit['p_min_i']\n                ub_i = min(unit['p_max_i'], unit['p_start_i'])\n        lb_list.append(lb_i)\n        ub_list.append(ub_i)\n        b_coeffs.append(units_info[idx]['b_i'])\n        c_i = units_info[idx]['c_i']\n        if c_i == 0:  # Avoid division by zero\n            c_i = 1e-6\n        c_coeffs.append(c_i)\n        committed_idxs.append(idx)\n        total_lb += lb_i\n        total_ub += ub_i\n    \n    # Handle infeasible dispatch\n    if current_load < total_lb or current_load > total_ub:\n        for idx in committed:\n            if current_load < total_lb:\n                p[idx] = lb_list[committed_idxs.index(idx)]\n            else:\n                p[idx] = ub_list[committed_idxs.index(idx)]\n        return np.array([u, p])\n    \n    # Lambda iteration for economic dispatch\n    low_lam = min(2 * c_i * lb_i + b_i for lb_i, b_i, c_i in zip(lb_list, b_coeffs, c_coeffs))\n    high_lam = max(2 * c_i * ub_i + b_i for ub_i, b_i, c_i in zip(ub_list, b_coeffs, c_coeffs))\n    \n    for _ in range(100):\n        mid_lam = (low_lam + high_lam) / 2\n        total_p = 0.0\n        for i in range(len(committed_idxs)):\n            lb_i = lb_list[i]\n            ub_i = ub_list[i]\n            b_i = b_coeffs[i]\n            c_i = c_coeffs[i]\n            if mid_lam <= 2 * c_i * lb_i + b_i:\n                p_val = lb_i\n            elif mid_lam >= 2 * c_i * ub_i + b_i:\n                p_val = ub_i\n            else:\n                p_val = (mid_lam - b_i) / (2 * c_i)\n            total_p += p_val\n        \n        if abs(total_p - current_load) < 1e-3:\n            break\n        if total_p < current_load:\n            low_lam = mid_lam\n        else:\n            high_lam = mid_lam\n    \n    # Set final power outputs\n    for i, idx in enumerate(committed_idxs):\n        lb_i = lb_list[i]\n        ub_i = ub_list[i]\n        b_i = b_coeffs[i]\n        c_i = c_coeffs[i]\n        if mid_lam <= 2 * c_i * lb_i + b_i:\n            p_val = lb_i\n        elif mid_lam >= 2 * c_i * ub_i + b_i:\n            p_val = ub_i\n        else:\n            p_val = (mid_lam - b_i) / (2 * c_i)\n        p[idx] = p_val\n    \n    return np.array([u, p])",
          "from": null,
          "gap_power_rate": 0.00461,
          "gap_price_rate": 0.01713,
          "fitness": 0.01087
     },
     {
          "name": "commit_units_by_min_startup_cost_heuristic",
          "algorithm": "1. Classify units into must-on (due to min up-time or shutdown ramp constraints), must-off (due to min down-time), free-on (can be turned off), and free-off (can be turned on).\n2. Start with must-on and free-on units committed. Attempt economic dispatch to meet load.\n3. If dispatch fails, turn on free-off units in priority order (lowest startup cost per MW plus marginal cost at min output) until dispatch succeeds.\n4. If dispatch succeeds with excess capacity at minimum output, attempt to turn off free-on units not needed to meet load to reduce costs.\n5. Perform final economic dispatch and return schedules.\n\n",
          "code": "import numpy as np\n\ndef economic_dispatch(online_units, load):\n    n = len(online_units)\n    lb = []\n    ub = []\n    indices = []\n    for unit in online_units:\n        if unit['u_i_0'] == 1:\n            lb_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            ub_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            lb_i = unit['p_min_i']\n            ub_i = min(unit['p_max_i'], unit['p_start_i'])\n        lb.append(lb_i)\n        ub.append(ub_i)\n        indices.append(unit['index'])\n    \n    total_lb = sum(lb)\n    total_ub = sum(ub)\n    \n    if total_lb > load or total_ub < load:\n        return None, None\n    \n    units_dispatch = []\n    for i, unit in enumerate(online_units):\n        mc = unit['b_i'] + 2 * unit['c_i'] * lb[i]\n        units_dispatch.append((mc, lb[i], ub[i], i, unit['index']))\n    \n    units_dispatch.sort(key=lambda x: x[0])\n    \n    p = lb.copy()\n    total = total_lb\n    gap = load - total\n    \n    for i in range(len(units_dispatch)):\n        mc, lb_i, ub_i, idx, unit_idx = units_dispatch[i]\n        add = min(gap, ub_i - lb_i)\n        p[idx] += add\n        gap -= add\n        if gap <= 1e-5:\n            break\n    \n    if gap > 1e-5:\n        return None, None\n    \n    dispatch_dict = {}\n    for i in range(len(online_units)):\n        dispatch_dict[indices[i]] = p[i]\n    \n    total_cost = 0\n    for i, unit in enumerate(online_units):\n        if unit['u_i_0'] == 0:\n            total_cost += unit['s_i']\n        total_cost += unit['a_i'] + unit['b_i'] * p[i] + unit['c_i'] * (p[i] ** 2)\n    \n    return dispatch_dict, total_cost\n\ndef commit_units_by_min_startup_cost_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:\n            if unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']:\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:\n            if unit['t_i_0'] < 0 and abs(unit['t_i_0']) < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    online_set = must_on + free_on\n    online_units = [{'index': i, **units_info[i]} for i in online_set]\n    dispatch_result, _ = economic_dispatch(online_units, current_load)\n    \n    if dispatch_result is None:\n        candidates = []\n        for i in free_off:\n            unit = units_info[i]\n            key = unit['s_i'] / unit['p_max_i'] + (unit['b_i'] + 2 * unit['c_i'] * unit['p_min_i'])\n            candidates.append((key, i))\n        candidates.sort(key=lambda x: x[0])\n        \n        for key, i in candidates:\n            online_set.append(i)\n            online_units = [{'index': j, **units_info[j]} for j in online_set]\n            dispatch_result, _ = economic_dispatch(online_units, current_load)\n            if dispatch_result is not None:\n                break\n        \n        if dispatch_result is None:\n            dispatch_result = {}\n            for i in online_set:\n                if units_info[i]['u_i_0'] == 1:\n                    ub_i = min(units_info[i]['p_max_i'], units_info[i]['p_i_0'] + units_info[i]['p_up_i'])\n                else:\n                    ub_i = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])\n                dispatch_result[i] = ub_i\n    \n    else:\n        candidates = []\n        for i in free_on:\n            if i in online_set and i in dispatch_result:\n                if units_info[i]['u_i_0'] == 1:\n                    lb_i = max(units_info[i]['p_min_i'], units_info[i]['p_i_0'] - units_info[i]['p_down_i'])\n                else:\n                    lb_i = units_info[i]['p_min_i']\n                if abs(dispatch_result[i] - lb_i) < 1e-5:\n                    saving = units_info[i]['a_i'] + units_info[i]['b_i'] * dispatch_result[i] + units_info[i]['c_i'] * (dispatch_result[i] ** 2)\n                    candidates.append((saving, i))\n        \n        candidates.sort(key=lambda x: x[0], reverse=True)\n        for saving, i in candidates:\n            new_online_set = [j for j in online_set if j != i]\n            new_online_units = [{'index': j, **units_info[j]} for j in new_online_set]\n            new_dispatch, _ = economic_dispatch(new_online_units, current_load)\n            if new_dispatch is not None:\n                online_set = new_online_set\n                dispatch_result = new_dispatch\n                break\n    \n    schedules = np.zeros((2, n_units))\n    for i in range(n_units):\n        if i in online_set and i in dispatch_result:\n            schedules[0, i] = 1\n            schedules[1, i] = dispatch_result[i]\n        else:\n            schedules[0, i] = 0\n            schedules[1, i] = 0\n    \n    return schedules",
          "from": null,
          "gap_power_rate": 0.00088,
          "gap_price_rate": 0.0224,
          "fitness": 0.01164
     },
     {
          "name": "refined_commit_units_heuristic",
          "algorithm": null,
          "code": "import numpy as np\n\ndef refined_commit_units_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    \n    # Initialize schedules\n    u_vector = [0] * n_units\n    p_vector = [0] * n_units\n    \n    # Classify units\n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for idx, unit in enumerate(units_info):\n        u_i_0 = unit['u_i_0']\n        t_i_0 = unit['t_i_0']\n        p_i_0 = unit['p_i_0']\n        \n        # Must-on conditions\n        if u_i_0 == 1:\n            if t_i_0 < unit['t_on_min_i'] or p_i_0 > unit['p_shut_i']:\n                must_on.append(idx)\n            else:\n                free_on.append(idx)\n        # Must-off conditions\n        else:\n            if -t_i_0 < unit['t_off_min_i']:\n                must_off.append(idx)\n            else:\n                free_off.append(idx)\n    \n    # Calculate effective bounds for must-on units\n    must_on_effective_min = {}\n    must_on_effective_max = {}\n    total_min_must = 0\n    total_max_must = 0\n    \n    for idx in must_on:\n        unit = units_info[idx]\n        min_eff = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_eff = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        must_on_effective_min[idx] = min_eff\n        must_on_effective_max[idx] = max_eff\n        total_min_must += min_eff\n        total_max_must += max_eff\n    \n    # Handle must-on over-generation\n    if total_min_must > current_load:\n        # Commit must-on units\n        for idx in must_on:\n            u_vector[idx] = 1\n            p_vector[idx] = must_on_effective_min[idx]  # Over-generation\n        # Free units remain off\n        return np.array([u_vector, p_vector])\n    \n    # Only must-on needed\n    if total_max_must >= current_load:\n        # Commit must-on units\n        committed = set(must_on)\n        # Free units turned off\n        # Dispatch must-on units to meet load\n        target = current_load\n        outputs = {}\n        remaining = target\n        # Initialize to min output\n        for idx in must_on:\n            outputs[idx] = must_on_effective_min[idx]\n            remaining -= outputs[idx]\n        \n        # Distribute remaining load by merit order\n        marginal_costs = []\n        for idx in must_on:\n            unit = units_info[idx]\n            mc = unit['b_i'] + 2 * unit['c_i'] * outputs[idx]\n            marginal_costs.append((mc, idx, must_on_effective_min[idx], must_on_effective_max[idx]))\n        \n        marginal_costs.sort(key=lambda x: x[0])\n        \n        for mc, idx, min_eff, max_eff in marginal_costs:\n            if remaining <= 0:\n                break\n            allocatable = min(remaining, max_eff - outputs[idx])\n            outputs[idx] += allocatable\n            remaining -= allocatable\n        \n        # Set outputs\n        for idx in must_on:\n            p_vector[idx] = outputs[idx]\n            u_vector[idx] = 1\n        \n        return np.array([u_vector, p_vector])\n    \n    # Case 3: Load exceeds must-on capacity\n    candidates = []  # (cost_at_min, idx, min_eff, max_eff, is_free_off)\n    candidate_eff_min = {}\n    candidate_eff_max = {}\n    \n    # Add free-on units (already online)\n    for idx in free_on:\n        unit = units_info[idx]\n        min_eff = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_eff = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        cost_min = unit['a_i'] + unit['b_i'] * min_eff + unit['c_i'] * (min_eff ** 2)\n        candidates.append((cost_min, idx, min_eff, max_eff, False))\n        candidate_eff_min[idx] = min_eff\n        candidate_eff_max[idx] = max_eff\n    \n    # Add free-off units (startup cost)\n    for idx in free_off:\n        unit = units_info[idx]\n        min_eff = unit['p_min_i']\n        max_eff = min(unit['p_max_i'], unit['p_start_i'])\n        cost_min = (unit['a_i'] + unit['b_i'] * min_eff + \n                    unit['c_i'] * (min_eff ** 2) + unit['s_i'])\n        candidates.append((cost_min, idx, min_eff, max_eff, True))\n        candidate_eff_min[idx] = min_eff\n        candidate_eff_max[idx] = max_eff\n    \n    # Sort candidates by cost at min output\n    candidates.sort(key=lambda x: x[0])\n    \n    committed_set = set(must_on)\n    total_min_c = total_min_must\n    total_max_c = total_max_must\n    \n    # Add candidates until total_max covers load\n    for cost_min, idx, min_eff, max_eff, is_free_off in candidates:\n        if total_max_c >= current_load:\n            break\n        committed_set.add(idx)\n        total_min_c += min_eff\n        total_max_c += max_eff\n    \n    # Determine dispatch target\n    dispatch_target = min(max(total_min_c, current_load), total_max_c)\n    \n    # Initialize all to min\n    for idx in committed_set:\n        if idx in must_on:\n            p_vector[idx] = must_on_effective_min[idx]\n        else:\n            p_vector[idx] = candidate_eff_min[idx]\n        u_vector[idx] = 1\n    current_total = sum(p_vector[idx] for idx in committed_set)\n    remaining = dispatch_target - current_total\n    \n    # Merit-order ramping\n    marginal_costs = []\n    for idx in committed_set:\n        unit = units_info[idx]\n        if idx in must_on:\n            low = must_on_effective_min[idx]\n            high = must_on_effective_max[idx]\n        else:\n            low = candidate_eff_min[idx]\n            high = candidate_eff_max[idx]\n        mc = unit['b_i'] + 2 * unit['c_i'] * p_vector[idx]\n        marginal_costs.append((mc, idx, low, high, p_vector[idx]))\n    \n    # Increase production (if remaining > 0)\n    if remaining > 0:\n        marginal_costs.sort(key=lambda x: x[0])\n        for mc, idx, low, high, current in marginal_costs:\n            if remaining <= 0:\n                break\n            headroom = high - current\n            if headroom > 0:\n                alloc = min(remaining, headroom)\n                p_vector[idx] += alloc\n                remaining -= alloc\n    \n    # Decrease production (if remaining < 0)\n    elif remaining < 0:\n        marginal_costs.sort(key=lambda x: -x[0])\n        for mc, idx, low, high, current in marginal_costs:\n            if remaining >= 0:\n                break\n            headroom = current - low\n            if headroom > 0:\n                alloc = min(-remaining, headroom)\n                p_vector[idx] -= alloc\n                remaining += alloc\n    \n    return np.array([u_vector, p_vector])",
          "from": "mutation",
          "gap_power_rate": 0.0059313678,
          "gap_price_rate": 0.0179953764,
          "fitness": 0.0119633721
     },
     {
          "name": "rolling_unit_commitment_heuristic_refined",
          "algorithm": "1. Classify units into must-on, must-off, free-on, and free-off based on min up/downtime and shutdown constraints\n2. Start with must-on and free-on units committed\n3. Compute effective min/max outputs considering ramp constraints for committed units\n4. Decommit free-on units with highest (min_output \u00d7 cost per MW) if total minimum exceeds load, maintaining feasibility\n5. Commit free-off units with lowest (startup_cost + min_output_cost)/min_output if max capacity is insufficient\n6. Perform economic dispatch by:\n   a. Setting committed units to effective minimum outputs\n   b. Distributing remaining load to units with lowest marginal costs\n   c. Adjusting downwards if over-allocated using highest marginal costs\n7. Return commitment states and power outputs\n\n",
          "code": "import numpy as np\nimport copy\n\ndef rolling_unit_commitment_heuristic_refined(units_info, load):\n    # Create a working copy to avoid modifying input\n    units = copy.deepcopy(units_info)\n    current_load = load[0]\n    \n    # Classify units\n    must_on_units = []\n    must_off_units = []\n    free_on_units = []\n    free_off_units = []\n    \n    for unit in units:\n        if unit['u_i_0'] == 1:\n            # Check if must remain on\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (unit['p_i_0'] > unit['p_shut_i']):\n                must_on_units.append(unit)\n            else:\n                free_on_units.append(unit)\n        else:\n            # Check if must remain off\n            if abs(unit['t_i_0']) < unit['t_off_min_i']:\n                must_off_units.append(unit)\n            else:\n                free_off_units.append(unit)\n    \n    # Initial commitment\n    committed_set = must_on_units + free_on_units\n    for unit in must_off_units:\n        unit['u_i'] = 0\n        unit['p_i'] = 0\n    \n    # Compute effective min/max outputs\n    for unit in committed_set:\n        # Online units\n        min_eff = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_eff = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        unit['min_eff'] = min_eff\n        unit['max_eff'] = max_eff\n    \n    for unit in free_off_units:\n        # Offline units that may be started\n        min_eff = unit['p_min_i']\n        max_eff = min(unit['p_max_i'], unit['p_start_i'])\n        unit['min_eff'] = min_eff\n        unit['max_eff'] = max_eff\n    \n    # Calculate total min and max capacity\n    total_min = sum(unit['min_eff'] for unit in committed_set)\n    total_max = sum(unit['max_eff'] for unit in committed_set)\n    \n    # Decommit free-on units if over-committed\n    free_on_units.sort(key=lambda u: (u['min_eff'] * (u['a_i'] + u['b_i']*u['min_eff'] + u['c_i']*u['min_eff']**2) / u['min_eff']), \n                     reverse=True)\n    to_remove = []\n    for unit in free_on_units:\n        if total_min <= current_load:\n            break\n        new_min = total_min - unit['min_eff']\n        new_max = total_max - unit['max_eff']\n        if new_min <= current_load and new_max >= current_load:\n            total_min = new_min\n            total_max = new_max\n            committed_set.remove(unit)\n            to_remove.append(unit)\n    for unit in to_remove:\n        free_on_units.remove(unit)\n    \n    # Commit free-off units if under-capacity\n    if total_max < current_load:\n        free_off_units.sort(key=lambda u: (u['s_i'] + u['a_i'] + u['b_i']*u['min_eff'] + u['c_i']*u['min_eff']**2) / u['min_eff'])\n        to_commit = []\n        for unit in free_off_units:\n            if total_max >= current_load:\n                break\n            total_min += unit['min_eff']\n            total_max += unit['max_eff']\n            committed_set.append(unit)\n            to_commit.append(unit)\n        for unit in to_commit:\n            free_off_units.remove(unit)\n    \n    # Initialize power outputs\n    total_p = 0\n    for unit in committed_set:\n        unit['u_i'] = 1\n        unit['p_i'] = unit['min_eff']\n        total_p += unit['min_eff']\n    \n    # Economic dispatch: allocate remaining load\n    remaining = current_load - total_p\n    if remaining > 0:  # Increase production\n        units_sorted = sorted(committed_set, key=lambda u: u['b_i'] + 2*u['c_i']*u['p_i'])\n        for unit in units_sorted:\n            if remaining <= 0:\n                break\n            avail = unit['max_eff'] - unit['p_i']\n            if avail > 0:\n                amount = min(remaining, avail)\n                unit['p_i'] += amount\n                remaining -= amount\n    elif remaining < 0:  # Decrease production\n        remaining = -remaining\n        units_sorted = sorted(committed_set, key=lambda u: u['b_i'] + 2*u['c_i']*u['p_i'], reverse=True)\n        for unit in units_sorted:\n            if remaining <= 0:\n                break\n            avail = unit['p_i'] - unit['min_eff']\n            if avail > 0:\n                amount = min(remaining, avail)\n                unit['p_i'] -= amount\n                remaining -= amount\n    \n    # Set decommitted units to zero\n    decommitted = free_off_units + must_off_units + free_on_units\n    for unit in decommitted:\n        unit['u_i'] = 0\n        unit['p_i'] = 0\n    \n    # Prepare output\n    schedules = np.zeros((2, len(units)))\n    for i, unit in enumerate(units):\n        schedules[0, i] = unit['u_i']\n        schedules[1, i] = unit['p_i']\n    \n    return schedules",
          "from": "mutation",
          "gap_power_rate": 0.018897445,
          "gap_price_rate": 0.0118576912,
          "fitness": 0.0153775681
     },
     {
          "name": "dynamic_priority_dispatch",
          "algorithm": "1. Classify units into must-on (insufficient up-time or above shutdown capacity), must-off (insufficient down-time), free-on (online and can turn off), and free-off (offline and can turn on).\n2. Initial commitment: must-on and free-on units.\n3. While total minimum output > current load and free-on units available, turn off free-on units by descending minimum output (ramp-down constrained).\n4. For free-off units (sorted by ascending (startup cost + production cost at p_min)/p_min), add units if total min \u2264 load. Stop when total max \u2265 load.\n5. Dispatch:\n   a) Compute min/max outputs considering ramp/start constraints.\n   b) Initialize outputs to min. Calculate deficit (load - total min) and headroom (total max - total min).\n   c) If deficit \u2264 headroom, distribute load incrementally using merit order of marginal cost at min output.\n   d) Else, set outputs to max (under-committed).\n6. Return unit states and power outputs.\n\n",
          "code": "import numpy as np\n\ndef dynamic_priority_dispatch(units_info, load):\n    current_load = load[0]  # Current time step load\n    n_units = len(units_info)\n    if n_units == 0:\n        return np.zeros((2, 0))\n    \n    # Initialize sets\n    must_on = set()\n    must_off = set()\n    free_on = set()\n    free_off = set()\n    \n    # Classify units\n    for i, unit in enumerate(units_info):\n        u0 = unit['u_i_0']\n        t0 = unit['t_i_0']\n        p0 = unit['p_i_0']\n        t_on_min = unit['t_on_min_i']\n        t_off_min = unit['t_off_min_i']\n        p_shut = unit['p_shut_i']\n        \n        if u0 == 1:\n            if t0 < t_on_min or p0 > p_shut:\n                must_on.add(i)\n            else:\n                free_on.add(i)\n        else:\n            if t0 < 0 and (-t0) < t_off_min:\n                must_off.add(i)\n            else:\n                free_off.add(i)\n    \n    # Initial commitment: must-on and free-on units\n    committed = must_on | free_on\n    \n    # Step 1: Compute initial min outputs for online units (ramp-down constrained)\n    min_i_dict = {}\n    max_i_dict = {}\n    for i in committed:\n        unit = units_info[i]\n        min_output = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_output = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        min_i_dict[i] = min_output\n        max_i_dict[i] = max_output\n    \n    # Compute total min and max for the committed units\n    total_min = sum(min_i_dict[i] for i in committed)\n    total_max = sum(max_i_dict[i] for i in committed)\n    \n    # Step 2: Turn off free-on units if over-committed (min output > load)\n    free_on_in_committed = [i for i in committed if i in free_on]\n    # Sort free-on by min_output (descending)\n    free_on_in_committed.sort(key=lambda i: min_i_dict[i], reverse=True)\n    \n    for i in free_on_in_committed:\n        if total_min <= current_load:\n            break\n        committed.remove(i)\n        total_min -= min_i_dict[i]\n        total_max -= max_i_dict[i]\n    \n    # Step 3: Compute min and max for online units in committed set again\n    min_i_dict = {i: min_i_dict[i] for i in committed}\n    max_i_dict = {i: max_i_dict[i] for i in committed}\n    \n    # Compute cost per MW for free-off units: (startup + cost at p_min) / p_min\n    free_off_avail = sorted(free_off, key=lambda i: \n        (units_info[i]['s_i'] + units_info[i]['a_i'] + \n         units_info[i]['b_i'] * units_info[i]['p_min_i'] + \n         units_info[i]['c_i'] * (units_info[i]['p_min_i'] ** 2)) / \n        (units_info[i]['p_min_i'] if units_info[i]['p_min_i'] > 0 else 1e9))\n    \n    # Add free-off units until meeting load, prioritizing low cost per MW\n    total_min_current = total_min\n    total_max_current = total_max\n    \n    for i in free_off_avail:\n        if total_max_current >= current_load:\n            break\n        unit = units_info[i]\n        p_min = unit['p_min_i']\n        p_max = min(unit['p_max_i'], unit['p_start_i'])\n        if total_min_current + p_min <= current_load: \n            committed.add(i)\n            total_min_current += p_min\n            total_max_current += p_max\n            # Precompute min/max for dispatch\n            min_i_dict[i] = p_min\n            max_i_dict[i] = p_max\n    \n    # Step 4: Dispatch\n    # Compute min/max for final committed set (considering start/ramp constraints)\n    min_dict = {}\n    max_dict = {}\n    for i in committed:\n        unit = units_info[i]\n        if unit['u_i_0'] == 1:  # Was online\n            min_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            max_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:  # Started\n            min_i = unit['p_min_i']\n            max_i = min(unit['p_max_i'], unit['p_start_i'])\n        min_dict[i] = min_i\n        max_dict[i] = max_i\n    \n    total_min_sum = sum(min_dict.values())\n    total_max_sum = sum(max_dict.values())\n    \n    # Calculate deficit and headroom\n    deficit = current_load - total_min_sum\n    headroom = total_max_sum - total_min_sum\n    p_dict = {i: min_dict[i] for i in committed}\n    \n    # Distribute deficit or handle under-commitment\n    if deficit <= headroom and deficit >= 0:\n        # Sort by marginal cost (incremental at min output)\n        committed_list = sorted(committed, \n                               key=lambda i: units_info[i]['b_i'] + 2 * units_info[i]['c_i'] * min_dict[i])\n        \n        for i in committed_list:\n            if deficit <= 0:\n                break\n            avail = max_dict[i] - min_dict[i]\n            add_amount = min(avail, deficit)\n            p_dict[i] += add_amount\n            deficit -= add_amount\n    elif deficit > headroom:  # Under-committed: set to max\n        for i in committed:\n            p_dict[i] = max_dict[i]\n    \n    # Build output vectors\n    u_vector = np.zeros(n_units)\n    p_vector = np.zeros(n_units)\n    \n    for i in range(n_units):\n        if i in p_dict:\n            u_vector[i] = 1\n            p_vector[i] = p_dict[i]\n    \n    return np.array([u_vector, p_vector])",
          "from": "crossover",
          "gap_power_rate": 0.0001296784,
          "gap_price_rate": 0.0346418817,
          "fitness": 0.0173857801
     },
     {
          "name": "rolling_priority_dispatch",
          "algorithm": "1. Classify units into must-on (min up-time unfulfilled or shutdown constraint violation), must-off (min down-time unfulfilled), free-on (online and freely decommitable), and free-off (offline and freely commitable).\n2. Initially commit must-on and free-on units. Compute effective min/max outputs considering ramp constraints for units remaining online.\n3. While total min output > load, decommit free-on units in descending order of min output to resolve over-commitment.\n4. While total max output < load, commit free-off units in ascending order of (startup cost + cost at min output)/min output to resolve under-commitment, using startup ramp limits for new units.\n5. For final committed set:\n   - If load \u2264 total min, set all units to min output\n   - If load \u2265 total max, set all units to max output\n   - Else perform lambda iteration economic dispatch respecting ramp constraints\n6. Set non-committed units to offline state and zero output.\n",
          "code": "import numpy as np\n\ndef rolling_priority_dispatch(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    \n    # Initialize classification lists\n    must_on, must_off, free_on, free_off = [], [], [], []\n    \n    # Classify units\n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:  # Online last period\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (unit['p_i_0'] > unit['p_shut_i']):\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:  # Offline last period\n            if -unit['t_i_0'] < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    # Initialize committed units and bounds\n    committed = set(must_on)\n    committed.update(free_on)\n    lb, ub = [0]*n_units, [0]*n_units\n    \n    # Compute bounds for initial committed units\n    for i in committed:\n        unit = units_info[i]\n        lb[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        ub[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n    \n    total_min = sum(lb[i] for i in committed)\n    total_max = sum(ub[i] for i in committed)\n    \n    # Handle over-commitment: turn off free-on units\n    free_on_committed = [i for i in free_on if i in committed]\n    free_on_committed.sort(key=lambda i: lb[i], reverse=True)\n    \n    for i in free_on_committed:\n        if total_min <= current_load:\n            break\n        committed.remove(i)\n        total_min -= lb[i]\n        total_max -= ub[i]\n    \n    # Handle under-commitment: turn on free-off units\n    if total_max < current_load:\n        def cost_metric(i):\n            unit = units_info[i]\n            min_cost = unit['a_i'] + unit['b_i']*unit['p_min_i'] + unit['c_i']*(unit['p_min_i']**2)\n            return (unit['s_i'] + min_cost) / unit['p_min_i']\n        \n        free_off_sorted = sorted(free_off, key=cost_metric)\n        \n        for i in free_off_sorted:\n            if total_max >= current_load:\n                break\n            unit = units_info[i]\n            lb[i] = unit['p_min_i']\n            ub[i] = min(unit['p_max_i'], unit['p_start_i'])\n            committed.add(i)\n            total_min += lb[i]\n            total_max += ub[i]\n    \n    # Prepare for dispatch\n    u_out = [0]*n_units\n    p_out = [0.0]*n_units\n    \n    # Case 1: Load below total min capacity\n    if current_load <= total_min:\n        for i in committed:\n            p_out[i] = lb[i]\n            u_out[i] = 1\n    \n    # Case 2: Load above total max capacity\n    elif current_load >= total_max:\n        for i in committed:\n            p_out[i] = ub[i]\n            u_out[i] = 1\n    \n    # Case 3: Dispatch needed\n    else:\n        # Collect committed unit parameters\n        indices, b_list, c_list, lb_list, ub_list = [], [], [], [], []\n        for i in committed:\n            unit = units_info[i]\n            indices.append(i)\n            b_list.append(unit['b_i'])\n            c_list.append(unit['c_i'])\n            lb_list.append(lb[i])\n            ub_list.append(ub[i])\n        \n        # Lambda iteration setup\n        lo_lambda = min(b_i + 2*c_i*lb_i for (b_i, c_i, lb_i) in zip(b_list, c_list, lb_list))\n        hi_lambda = max(b_i + 2*c_i*ub_i for (b_i, c_i, ub_i) in zip(b_list, c_list, ub_list))\n        tol, max_iter = 1e-6, 1000\n        \n        # Bisection loop\n        for _ in range(max_iter):\n            mid_lambda = (lo_lambda + hi_lambda) / 2\n            total_p = 0.0\n            for j in range(len(indices)):\n                if c_list[j] > 0:\n                    p_j = (mid_lambda - b_list[j]) / (2 * c_list[j])\n                else:\n                    p_j = lb_list[j]\n                p_j = max(lb_list[j], min(ub_list[j], p_j))\n                total_p += p_j\n            \n            if abs(total_p - current_load) < tol:\n                break\n            if total_p < current_load:\n                lo_lambda = mid_lambda\n            else:\n                hi_lambda = mid_lambda\n        \n        # Set final dispatch values\n        for j in range(len(indices)):\n            if c_list[j] > 0:\n                p_j = (mid_lambda - b_list[j]) / (2 * c_list[j])\n            else:\n                p_j = lb_list[j]\n            p_out[indices[j]] = max(lb_list[j], min(ub_list[j], p_j))\n            u_out[indices[j]] = 1\n    \n    return np.array([u_out, p_out])",
          "from": "crossover",
          "gap_power_rate": 0.0001296785,
          "gap_price_rate": 0.0360463335,
          "fitness": 0.018088006
     },
     {
          "name": "refined_dynamic_commitment_v2",
          "algorithm": "1. Determine forced commitment states:  \n   - Must remain on if previously online and (min up-time unfulfilled or previous output > shutdown capacity)  \n   - Must remain off if previously offline and offline duration < min down-time  \n2. Classify units into must-on, must-off, free-on (online and freely decommitable), and free-off (offline and freely commitable)  \n3. Initialize commitment with must-on and free-on units  \n4. Compute effective min/max outputs with ramp constraints for committed units:  \n   - For previously online units: [max(p_min, p_prev - ramp_down), min(p_max, p_prev + ramp_up)]  \n   - For newly started units: [p_min, min(p_max, startup_ramp)]  \n5. If total minimum output exceeds load:  \n   - Calculate cost-saving potential per MW reduction for free-on units  \n   - Turn off free-on units with highest cost-saving per MW reduction until total minimum \u2264 load while maintaining total maximum \u2265 load  \n6. If total maximum output below load:  \n   - Calculate cost per MW for free-off units (startup + min output cost) / min output  \n   - Turn on free-off units with lowest cost per MW until total maximum \u2265 load  \n7. Clamp target load between total effective min/max capacity  \n8. Perform economic dispatch via lambda iteration:  \n   - Bisect lambda to match target load  \n   - Compute unconstrained outputs from lambda  \n   - Clamp outputs to effective min/max  \n9. Set non-committed units to offline (0 output)  \n\n",
          "code": "import numpy as np  \n\ndef refined_dynamic_commitment_v2(units_info, load):  \n    current_load = load[0]  \n    num_units = len(units_info)  \n    schedules = np.zeros((2, num_units))  \n    if current_load <= 1e-6:  \n        return schedules  \n    \n    forced_on, forced_off = [], []  \n    for i, unit in enumerate(units_info):  \n        if unit['u_i_0'] == 1:  \n            if unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']:  \n                forced_on.append(i)  \n        else:  \n            offline_time = -unit['t_i_0']  \n            if offline_time < unit['t_off_min_i']:  \n                forced_off.append(i)  \n                  \n    must_on = forced_on  \n    must_off = forced_off  \n    free_on, free_off = [], []  \n    for i in range(num_units):  \n        if i in must_on or i in must_off:  \n            continue  \n        if units_info[i]['u_i_0'] == 1:  \n            free_on.append(i)  \n        else:  \n            free_off.append(i)  \n              \n    committed = set(must_on) | set(free_on)  \n    eff_min = np.zeros(num_units)  \n    eff_max = np.zeros(num_units)  \n    for i in range(num_units):  \n        unit = units_info[i]  \n        if i in committed:  \n            if unit['u_i_0'] == 1:  \n                eff_min[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])  \n                eff_max[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])  \n            else:  \n                eff_min[i] = unit['p_min_i']  \n                eff_max[i] = min(unit['p_max_i'], unit['p_start_i'])  \n                  \n    total_min = sum(eff_min[list(committed)])  \n    total_max = sum(eff_max[list(committed)])  \n    free_on_available = free_on.copy()  \n      \n    if total_min > current_load:  \n        candidate_data = []  \n        for i in free_on_available:  \n            if i not in committed:  \n                continue  \n            cost_at_min = units_info[i]['a_i'] + units_info[i]['b_i'] * eff_min[i] + units_info[i]['c_i'] * (eff_min[i] ** 2)  \n            cost_per_mw = cost_at_min / eff_min[i]  \n            candidate_data.append((i, cost_per_mw, eff_min[i], eff_max[i]))  \n        candidate_data.sort(key=lambda x: x[1], reverse=True)  \n          \n        for (i, _, min_i, max_i) in candidate_data:  \n            total_min_new = total_min - min_i  \n            total_max_new = total_max - max_i  \n            if total_max_new >= current_load:  \n                committed.remove(i)  \n                free_on_available.remove(i)  \n                total_min, total_max = total_min_new, total_max_new  \n                eff_min[i] = eff_max[i] = 0  \n                if total_min <= current_load:  \n                    break  \n                  \n    if total_max < current_load:  \n        candidate_data = []  \n        for i in free_off:  \n            min_i = units_info[i]['p_min_i']  \n            max_i = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])  \n            min_cost = units_info[i]['a_i'] + units_info[i]['b_i'] * min_i + units_info[i]['c_i'] * (min_i ** 2)  \n            cost_per_mw = (units_info[i]['s_i'] + min_cost) / min_i  \n            candidate_data.append((i, cost_per_mw, min_i, max_i))  \n        candidate_data.sort(key=lambda x: x[1])  \n          \n        for (i, _, min_i, max_i) in candidate_data:  \n            eff_min[i] = min_i  \n            eff_max[i] = max_i  \n            committed.add(i)  \n            total_min += min_i  \n            total_max += max_i  \n            if total_max >= current_load:  \n                break  \n                  \n    target = np.clip(current_load, total_min, total_max)  \n    committed_list = list(committed)  \n    if not committed_list:  \n        return schedules  \n      \n    low_lambda = 0  \n    high_lambda = 10000  \n    p_alloc = np.zeros(num_units)  \n      \n    for _ in range(100):  \n        mid_lambda = (low_lambda + high_lambda) / 2  \n        total_power = 0  \n        for i in committed_list:  \n            unit = units_info[i]  \n            if unit['c_i'] == 0:  \n                p_i = eff_max[i] if mid_lambda > unit['b_i'] else eff_min[i]  \n            else:  \n                p_uncon = (mid_lambda - unit['b_i']) / (2 * unit['c_i'])  \n                p_i = max(eff_min[i], min(eff_max[i], p_uncon))  \n            p_alloc[i] = p_i  \n            total_power += p_i  \n              \n        if abs(total_power - target) < 0.001:  \n            break  \n        if total_power < target:  \n            low_lambda = mid_lambda  \n        else:  \n            high_lambda = mid_lambda  \n              \n    for i in committed_list:  \n        schedules[0][i] = 1  \n        schedules[1][i] = p_alloc[i]  \n    return schedules  ",
          "from": "mutation",
          "gap_power_rate": 0.0001297881,
          "gap_price_rate": 0.0360463371,
          "fitness": 0.0180880626
     },
     {
          "name": "refined_priority_dispatch",
          "algorithm": null,
          "code": "import numpy as np\n\ndef refined_priority_dispatch(units_info, load):\n    n = len(units_info)\n    u_out = [0] * n\n    p_out = [0] * n\n    \n    current_load = load[0]  # We only use the current load\n    \n    # Step 1: Identify must-on, must-off, free-on, free-off\n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for i, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        t_i0 = unit['t_i_0']\n        p_i0 = unit['p_i_0']\n        \n        if u_i0 == 1:  # Was online\n            if t_i0 < unit['t_on_min_i'] or p_i0 > unit['p_shut_i']:\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:  # Was offline\n            if -t_i0 < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    # Step 2: Start with must-on and free-on committed\n    committed = set(must_on + free_on)\n    \n    # Step 3: Compute effective min/max for committed units\n    effective_min = {}\n    effective_max = {}\n    total_min = 0.0\n    total_max = 0.0\n    \n    for i in committed:\n        unit = units_info[i]\n        p_i0 = unit['p_i_0']\n        \n        if i in must_on or i in free_on:  # Was online\n            min_val = max(unit['p_min_i'], p_i0 - unit['p_down_i'])\n            max_val = min(unit['p_max_i'], p_i0 + unit['p_up_i'])\n        else:  # Newly committed (free-off being turned on)\n            min_val = unit['p_min_i']\n            max_val = min(unit['p_max_i'], unit['p_start_i'])\n        \n        effective_min[i] = min_val\n        effective_max[i] = max_val\n        total_min += min_val\n        total_max += max_val\n    \n    # Step 4: Turn off expensive free-on units if over-committed\n    if total_min > current_load:\n        # Sort free-on units by average cost at min output (descending)\n        def avg_cost_free_on(i):\n            min_val = effective_min[i]\n            cost = units_info[i]['a_i'] + units_info[i]['b_i'] * min_val + units_info[i]['c_i'] * min_val**2\n            return cost / min_val if min_val > 0 else float('inf')\n        \n        sorted_free_on = sorted(free_on, key=avg_cost_free_on, reverse=True)\n        remove_list = []\n        \n        for i in sorted_free_on:\n            if total_min <= current_load:\n                break\n            # Check if removal maintains feasibility\n            if total_max - effective_max[i] >= current_load:\n                remove_list.append(i)\n                total_min -= effective_min[i]\n                total_max -= effective_max[i]\n        \n        for i in remove_list:\n            committed.remove(i)\n    \n    # Step 5: Turn on free-off units if under-committed\n    if total_max < current_load:\n        # Sort free-off units by average cost with startup (ascending)\n        def avg_cost_free_off(i):\n            min_val = units_info[i]['p_min_i']\n            cost = units_info[i]['s_i'] + units_info[i]['a_i'] + units_info[i]['b_i'] * min_val + units_info[i]['c_i'] * min_val**2\n            return cost / min_val if min_val > 0 else float('inf')\n        \n        sorted_free_off = sorted(free_off, key=avg_cost_free_off)\n        \n        for i in sorted_free_off:\n            if total_max >= current_load:\n                break\n            \n            min_val = units_info[i]['p_min_i']\n            max_val = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])\n            \n            committed.add(i)\n            effective_min[i] = min_val\n            effective_max[i] = max_val\n            total_min += min_val\n            total_max += max_val\n    \n    # Step 6: Dispatch\n    if not committed:\n        return np.array([u_out, p_out])\n    \n    # Case 1: Load <= total min\n    if current_load <= total_min:\n        for i in committed:\n            u_out[i] = 1\n            p_out[i] = effective_min[i]\n    \n    # Case 2: Load >= total max\n    elif current_load >= total_max:\n        for i in committed:\n            u_out[i] = 1\n            p_out[i] = effective_max[i]\n    \n    # Case 3: Perform lambda iteration\n    else:\n        # Set bounds for lambda\n        low = min(unit['b_i'] + 2 * unit['c_i'] * effective_min.get(i,0) for i, unit in enumerate(units_info) if i in committed)\n        high = max(unit['b_i'] + 2 * unit['c_i'] * effective_max.get(i,0) for i, unit in enumerate(units_info) if i in committed)\n        \n        # Bisection parameters\n        tol = 1e-5\n        max_iter = 1000\n        iter_count = 0\n        total_p = 0\n        p_values = [0] * n\n        \n        # Bisection loop\n        while abs(high - low) > tol and iter_count < max_iter:\n            mid = (low + high) / 2\n            total_p = 0.0\n            \n            # Calculate unit outputs for current lambda\n            for i in committed:\n                unit = units_info[i]\n                if unit['c_i'] == 0:\n                    # Linear cost function\n                    p_i = unit['p_max_i'] if mid > unit['b_i'] else unit['p_min_i']\n                else:\n                    p_i = (mid - unit['b_i']) / (2 * unit['c_i'])\n                \n                # Clamp to effective min/max\n                p_i = max(effective_min[i], min(p_i, effective_max[i]))\n                total_p += p_i\n                p_values[i] = p_i\n            \n            # Adjust lambda based on total power\n            if total_p < current_load:\n                low = mid\n            else:\n                high = mid\n            \n            iter_count += 1\n        \n        # Apply final lambda values\n        for i in committed:\n            u_out[i] = 1\n            p_out[i] = p_values[i]\n    \n    # Non-committed units remain 0 (already set)\n    return np.array([u_out, p_out])",
          "from": "mutation",
          "gap_power_rate": 0.0001300728,
          "gap_price_rate": 0.0360464086,
          "fitness": 0.0180882407
     },
     {
          "name": "refined_rolling_commitment_heuristic",
          "algorithm": "1. Classify units into must-on (online with unsatisfied min up-time or exceeded shutdown capacity), must-off (offline with unsatisfied min down-time), free-on (online and can decommit), free-off (offline and can commit).\n2. Initialize committed units as must-on + free-on. Compute effective min/max outputs considering ramp constraints for online units.\n3. While total min output > current load and free-on units available, decommit free-on units with highest production cost at min output.\n4. While total max output < current load and free-off units available, commit free-off units with lowest (startup cost + cost at min output)/min output (using startup ramp limits for new units).\n5. Perform economic dispatch using lambda iteration:\n   - For committed units, compute feasible ranges based on ramp constraints and state (online/started).\n   - Use bisection on lambda to set unconstrained outputs, clamp to feasible ranges, and sum outputs.\n   - Adjust lambda low/high bounds until total power matches load within tolerance.\n6. Set non-committed units to u_i=0 and p_i=0.\n7. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef refined_rolling_commitment_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    committed_indices = []\n    L_arr = np.zeros(n_units)  # Lower bounds\n    U_arr = np.zeros(n_units)  # Upper bounds\n    \n    # Classify units\n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for i, unit in enumerate(units_info):\n        u_i_0 = unit['u_i_0']\n        t_i_0 = unit['t_i_0']\n        p_i_0 = unit['p_i_0']\n        p_shut_i = unit['p_shut_i']\n        t_on_min_i = unit['t_on_min_i']\n        t_off_min_i = unit['t_off_min_i']\n        \n        if u_i_0 == 1:\n            if (t_i_0 < t_on_min_i and t_i_0 > 0) or p_i_0 > p_shut_i:\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:\n            if t_i_0 > -t_off_min_i:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    # Initial commitment: must-on + free-on\n    committed_indices = set(must_on) | set(free_on)\n    free_on_in_commit = set(free_on)  # Track decommittable units\n    free_off_available = set(free_off)  # Track committable units\n    \n    # Set initial bounds for committed units\n    for i in committed_indices:\n        unit = units_info[i]\n        if i in must_on or i in free_on:  # Online units\n            L_arr[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            U_arr[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:  # Newly committed (free-off) - handled in step4\n            pass\n    \n    # Adjust commitment for over/under commitment\n    changed = True\n    while changed:\n        changed = False\n        total_min = sum(L_arr[i] for i in committed_indices)\n        total_max = sum(U_arr[i] for i in committed_indices)\n        \n        # Decommit if over-committed\n        if total_min > current_load and free_on_in_commit:\n            # Find free-on unit with highest cost at min output\n            max_cost = -1\n            remove_unit = None\n            for i in free_on_in_commit:\n                unit = units_info[i]\n                cost = unit['a_i'] + unit['b_i'] * L_arr[i] + unit['c_i'] * (L_arr[i] ** 2)\n                if cost > max_cost:\n                    max_cost = cost\n                    remove_unit = i\n            if remove_unit is not None:\n                committed_indices.remove(remove_unit)\n                free_on_in_commit.remove(remove_unit)\n                L_arr[remove_unit] = 0\n                U_arr[remove_unit] = 0\n                changed = True\n                continue\n                \n        # Commit if under-committed\n        if total_max < current_load and free_off_available:\n            # Find free-off unit with lowest cost per MW at min output\n            min_priority = float('inf')\n            add_unit = None\n            for i in free_off_available:\n                unit = units_info[i]\n                min_output = unit['p_min_i']\n                cost_at_min = unit['a_i'] + unit['b_i'] * min_output + unit['c_i'] * (min_output ** 2)\n                priority = (unit['s_i'] + cost_at_min) / min_output\n                if priority < min_priority:\n                    min_priority = priority\n                    add_unit = i\n            if add_unit is not None:\n                committed_indices.add(add_unit)\n                free_off_available.remove(add_unit)\n                L_arr[add_unit] = units_info[add_unit]['p_min_i']\n                U_arr[add_unit] = min(units_info[add_unit]['p_max_i'], units_info[add_unit]['p_start_i'])\n                changed = True\n                continue\n                \n    # Prepare for dispatch: compute bounds for each committed unit\n    dispatch_indices = list(committed_indices)\n    n_dispatch = len(dispatch_indices)\n    p_dispatch = np.zeros(n_dispatch)\n    L_dispatch = np.zeros(n_dispatch)\n    U_dispatch = np.zeros(n_dispatch)\n    b_dispatch = np.zeros(n_dispatch)\n    c_dispatch = np.zeros(n_dispatch)\n    \n    # Populate dispatch arrays with bounds and coefficients\n    for idx, i in enumerate(dispatch_indices):\n        unit = units_info[i]\n        if i in must_on or i in free_on:  # Online units\n            L_dispatch[idx] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            U_dispatch[idx] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:  # Started units (free-off)\n            L_dispatch[idx] = unit['p_min_i']\n            U_dispatch[idx] = min(unit['p_max_i'], unit['p_start_i'])\n        b_dispatch[idx] = unit['b_i']\n        c_dispatch[idx] = unit['c_i']\n    \n    # Economic dispatch using lambda iteration\n    if n_dispatch > 0:\n        # Find lambda min and max bounds\n        mc_low = np.array([b + 2 * c * L for b, c, L in zip(b_dispatch, c_dispatch, L_dispatch)])\n        mc_high = np.array([b + 2 * c * U for b, c, U in zip(b_dispatch, c_dispatch, U_dispatch)])\n        lambda_min = min(mc_low)\n        lambda_max = max(mc_high)\n        \n        # Bisection settings\n        lambda_mid = (lambda_min + lambda_max) / 2\n        tol = 0.1\n        max_iter = 100\n        iter_count = 0\n        total_power = 0\n        \n        while iter_count < max_iter and abs(lambda_max - lambda_min) > 1e-6:\n            total_power = 0\n            for j in range(n_dispatch):\n                if c_dispatch[j] > 0:\n                    p_uncon = (lambda_mid - b_dispatch[j]) / (2 * c_dispatch[j])\n                else:\n                    if lambda_mid > b_dispatch[j]:\n                        p_uncon = U_dispatch[j]\n                    elif lambda_mid < b_dispatch[j]:\n                        p_uncon = L_dispatch[j]\n                    else:\n                        p_uncon = L_dispatch[j]\n                p_clamped = max(L_dispatch[j], min(p_uncon, U_dispatch[j]))\n                total_power += p_clamped\n                p_dispatch[j] = p_clamped\n            \n            if abs(total_power - current_load) < tol:\n                break\n            if total_power < current_load:\n                lambda_min = lambda_mid\n            else:\n                lambda_max = lambda_mid\n            lambda_mid = (lambda_min + lambda_max) / 2\n            iter_count += 1\n    \n    # Prepare output arrays\n    u_out = np.zeros(n_units)\n    p_out = np.zeros(n_units)\n    for i in range(n_units):\n        if i in committed_indices:\n            u_out[i] = 1\n            if i in dispatch_indices:\n                idx = dispatch_indices.index(i)\n                p_out[i] = p_dispatch[idx]\n            else:  # Units that were set to min/max during dispatch\n                p_out[i] = L_arr[i]\n        else:\n            u_out[i] = 0\n            p_out[i] = 0.0\n    \n    return np.array([u_out, p_out])",
          "from": "crossover",
          "gap_power_rate": 0.0001415873,
          "gap_price_rate": 0.0360424112,
          "fitness": 0.0180919993
     }
]