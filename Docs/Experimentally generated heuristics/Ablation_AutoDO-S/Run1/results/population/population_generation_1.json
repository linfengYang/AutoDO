[
     {
          "name": "commit_units_heuristic",
          "algorithm": "1. Identify must-run units that were online in the previous period and either haven't satisfied minimum up-time or exceeded shutdown capacity.\n2. Compute total minimum and available maximum capacity from must-run units considering ramp constraints.\n3. If total minimum exceeds load, set must-run units to their lower bounds (over-generation).\n4. If load is within must-run capacity, dispatch only must-run units to meet load.\n5. Otherwise, consider candidate units (non-must-run that can be turned on/left on) sorted by cost per MW at minimum output.\n6. Add cheapest candidates until total available capacity meets or exceeds load.\n7. Dispatch all committed units using lambda iteration to minimize cost while respecting ramp and output limits.\n8. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    u = [0] * n_units\n    p = [0.0] * n_units\n    \n    # Step 1: Identify must-run units\n    must_run = []\n    for idx, unit in enumerate(units_info):\n        u_i_0 = unit['u_i_0']\n        if u_i_0 == 1:  # was online\n            t_i_0 = unit['t_i_0']\n            t_on_min_i = unit['t_on_min_i']\n            p_i_0 = unit['p_i_0']\n            p_shut_i = unit['p_shut_i']\n            if t_i_0 < t_on_min_i or p_i_0 > p_shut_i:\n                must_run.append(idx)\n                u[idx] = 1\n    \n    # Step 2: Compute bounds for must-run units\n    total_min_must = 0.0\n    total_available_max_must = 0.0\n    bounds = {}\n    for idx in must_run:\n        unit = units_info[idx]\n        p_min_i = unit['p_min_i']\n        p_max_i = unit['p_max_i']\n        p_i_0 = unit['p_i_0']\n        p_up_i = unit['p_up_i']\n        p_down_i = unit['p_down_i']\n        \n        lb_i = max(p_min_i, p_i_0 - p_down_i)\n        ub_i = min(p_max_i, p_i_0 + p_up_i)\n        bounds[idx] = (lb_i, ub_i)\n        total_min_must += lb_i\n        total_available_max_must += ub_i\n    \n    # Step 3: Over-generation case\n    if total_min_must > current_load:\n        for idx in must_run:\n            lb_i, _ = bounds[idx]\n            p[idx] = lb_i\n        return np.array([u, p])\n    \n    # Step 4: Load within must-run capacity\n    if current_load <= total_available_max_must:\n        committed = must_run\n    else:\n        # Step 5: Prepare candidate units\n        candidate_units = []\n        for idx, unit in enumerate(units_info):\n            if idx in must_run:\n                continue\n            u_i_0 = unit['u_i_0']\n            t_i_0 = unit['t_i_0']\n            t_off_min_i = unit['t_off_min_i']\n            a_i = unit['a_i']\n            b_i = unit['b_i']\n            c_i = unit['c_i']\n            s_i = unit['s_i']\n            p_min_i = unit['p_min_i']\n            p_max_i = unit['p_max_i']\n            p_i_0 = unit['p_i_0']\n            p_up_i = unit['p_up_i']\n            p_down_i = unit['p_down_i']\n            p_start_i = unit['p_start_i']\n            \n            # Check if can be committed\n            if u_i_0 == 1:  # Type 2: online but not must-run\n                cost_per_MW = (a_i + b_i * p_min_i + c_i * p_min_i**2) / p_min_i\n                available_capacity = min(p_max_i, p_i_0 + p_up_i)\n                lb_i = max(p_min_i, p_i_0 - p_down_i)\n                candidate_units.append((cost_per_MW, idx, available_capacity, lb_i, 'type2'))\n            elif t_i_0 <= -t_off_min_i:  # Type 3: offline and can be turned on\n                cost_per_MW = (a_i + s_i + b_i * p_min_i + c_i * p_min_i**2) / p_min_i\n                available_capacity = min(p_max_i, p_start_i)\n                lb_i = p_min_i\n                candidate_units.append((cost_per_MW, idx, available_capacity, lb_i, 'type3'))\n        \n        # Sort by cost per MW\n        candidate_units.sort(key=lambda x: x[0])\n        committed_candidates = []\n        total_available_max = total_available_max_must\n        \n        # Step 6: Add candidates until capacity meets load\n        for cand in candidate_units:\n            if total_available_max >= current_load:\n                break\n            cost_per_MW, idx, available_capacity, lb_i, unit_type = cand\n            total_available_max += available_capacity\n            committed_candidates.append((idx, lb_i, available_capacity, unit_type))\n            u[idx] = 1  # Commit unit\n        \n        committed = must_run + [idx for (idx, _, _, _) in committed_candidates]\n        # Update bounds for candidate units\n        for cand in committed_candidates:\n            idx, lb_i, available_capacity, unit_type = cand\n            if unit_type == 'type2':\n                unit = units_info[idx]\n                p_i_0 = unit['p_i_0']\n                p_down_i = unit['p_down_i']\n                p_min_i = unit['p_min_i']\n                lb_i = max(p_min_i, p_i_0 - p_down_i)\n                ub_i = min(unit['p_max_i'], p_i_0 + unit['p_up_i'])\n            else:  # type3\n                ub_i = min(unit['p_max_i'], unit['p_start_i'])\n            bounds[idx] = (lb_i, ub_i)\n    \n    # Step 7: Dispatch for all committed units\n    lb_list = []\n    ub_list = []\n    b_coeffs = []\n    c_coeffs = []\n    committed_idxs = []\n    total_lb = 0.0\n    total_ub = 0.0\n    \n    for idx in committed:\n        lb_i, ub_i = bounds.get(idx, (0.0, 0.0))\n        if idx not in must_run and u[idx] == 1:\n            unit = units_info[idx]\n            if unit['u_i_0'] == 1:  # Type2\n                p_i_0 = unit['p_i_0']\n                lb_i = max(unit['p_min_i'], p_i_0 - unit['p_down_i'])\n                ub_i = min(unit['p_max_i'], p_i_0 + unit['p_up_i'])\n            else:  # Type3\n                lb_i = unit['p_min_i']\n                ub_i = min(unit['p_max_i'], unit['p_start_i'])\n        lb_list.append(lb_i)\n        ub_list.append(ub_i)\n        b_coeffs.append(units_info[idx]['b_i'])\n        c_i = units_info[idx]['c_i']\n        if c_i == 0:  # Avoid division by zero\n            c_i = 1e-6\n        c_coeffs.append(c_i)\n        committed_idxs.append(idx)\n        total_lb += lb_i\n        total_ub += ub_i\n    \n    # Handle infeasible dispatch\n    if current_load < total_lb or current_load > total_ub:\n        for idx in committed:\n            if current_load < total_lb:\n                p[idx] = lb_list[committed_idxs.index(idx)]\n            else:\n                p[idx] = ub_list[committed_idxs.index(idx)]\n        return np.array([u, p])\n    \n    # Lambda iteration for economic dispatch\n    low_lam = min(2 * c_i * lb_i + b_i for lb_i, b_i, c_i in zip(lb_list, b_coeffs, c_coeffs))\n    high_lam = max(2 * c_i * ub_i + b_i for ub_i, b_i, c_i in zip(ub_list, b_coeffs, c_coeffs))\n    \n    for _ in range(100):\n        mid_lam = (low_lam + high_lam) / 2\n        total_p = 0.0\n        for i in range(len(committed_idxs)):\n            lb_i = lb_list[i]\n            ub_i = ub_list[i]\n            b_i = b_coeffs[i]\n            c_i = c_coeffs[i]\n            if mid_lam <= 2 * c_i * lb_i + b_i:\n                p_val = lb_i\n            elif mid_lam >= 2 * c_i * ub_i + b_i:\n                p_val = ub_i\n            else:\n                p_val = (mid_lam - b_i) / (2 * c_i)\n            total_p += p_val\n        \n        if abs(total_p - current_load) < 1e-3:\n            break\n        if total_p < current_load:\n            low_lam = mid_lam\n        else:\n            high_lam = mid_lam\n    \n    # Set final power outputs\n    for i, idx in enumerate(committed_idxs):\n        lb_i = lb_list[i]\n        ub_i = ub_list[i]\n        b_i = b_coeffs[i]\n        c_i = c_coeffs[i]\n        if mid_lam <= 2 * c_i * lb_i + b_i:\n            p_val = lb_i\n        elif mid_lam >= 2 * c_i * ub_i + b_i:\n            p_val = ub_i\n        else:\n            p_val = (mid_lam - b_i) / (2 * c_i)\n        p[idx] = p_val\n    \n    return np.array([u, p])",
          "from": null,
          "gap_power_rate": 0.00461,
          "gap_price_rate": 0.01713,
          "fitness": 0.01087
     },
     {
          "name": "commit_units_by_min_startup_cost_heuristic",
          "algorithm": "1. Classify units into must-on (due to min up-time or shutdown ramp constraints), must-off (due to min down-time), free-on (can be turned off), and free-off (can be turned on).\n2. Start with must-on and free-on units committed. Attempt economic dispatch to meet load.\n3. If dispatch fails, turn on free-off units in priority order (lowest startup cost per MW plus marginal cost at min output) until dispatch succeeds.\n4. If dispatch succeeds with excess capacity at minimum output, attempt to turn off free-on units not needed to meet load to reduce costs.\n5. Perform final economic dispatch and return schedules.\n\n",
          "code": "import numpy as np\n\ndef economic_dispatch(online_units, load):\n    n = len(online_units)\n    lb = []\n    ub = []\n    indices = []\n    for unit in online_units:\n        if unit['u_i_0'] == 1:\n            lb_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            ub_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            lb_i = unit['p_min_i']\n            ub_i = min(unit['p_max_i'], unit['p_start_i'])\n        lb.append(lb_i)\n        ub.append(ub_i)\n        indices.append(unit['index'])\n    \n    total_lb = sum(lb)\n    total_ub = sum(ub)\n    \n    if total_lb > load or total_ub < load:\n        return None, None\n    \n    units_dispatch = []\n    for i, unit in enumerate(online_units):\n        mc = unit['b_i'] + 2 * unit['c_i'] * lb[i]\n        units_dispatch.append((mc, lb[i], ub[i], i, unit['index']))\n    \n    units_dispatch.sort(key=lambda x: x[0])\n    \n    p = lb.copy()\n    total = total_lb\n    gap = load - total\n    \n    for i in range(len(units_dispatch)):\n        mc, lb_i, ub_i, idx, unit_idx = units_dispatch[i]\n        add = min(gap, ub_i - lb_i)\n        p[idx] += add\n        gap -= add\n        if gap <= 1e-5:\n            break\n    \n    if gap > 1e-5:\n        return None, None\n    \n    dispatch_dict = {}\n    for i in range(len(online_units)):\n        dispatch_dict[indices[i]] = p[i]\n    \n    total_cost = 0\n    for i, unit in enumerate(online_units):\n        if unit['u_i_0'] == 0:\n            total_cost += unit['s_i']\n        total_cost += unit['a_i'] + unit['b_i'] * p[i] + unit['c_i'] * (p[i] ** 2)\n    \n    return dispatch_dict, total_cost\n\ndef commit_units_by_min_startup_cost_heuristic(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:\n            if unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']:\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:\n            if unit['t_i_0'] < 0 and abs(unit['t_i_0']) < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    online_set = must_on + free_on\n    online_units = [{'index': i, **units_info[i]} for i in online_set]\n    dispatch_result, _ = economic_dispatch(online_units, current_load)\n    \n    if dispatch_result is None:\n        candidates = []\n        for i in free_off:\n            unit = units_info[i]\n            key = unit['s_i'] / unit['p_max_i'] + (unit['b_i'] + 2 * unit['c_i'] * unit['p_min_i'])\n            candidates.append((key, i))\n        candidates.sort(key=lambda x: x[0])\n        \n        for key, i in candidates:\n            online_set.append(i)\n            online_units = [{'index': j, **units_info[j]} for j in online_set]\n            dispatch_result, _ = economic_dispatch(online_units, current_load)\n            if dispatch_result is not None:\n                break\n        \n        if dispatch_result is None:\n            dispatch_result = {}\n            for i in online_set:\n                if units_info[i]['u_i_0'] == 1:\n                    ub_i = min(units_info[i]['p_max_i'], units_info[i]['p_i_0'] + units_info[i]['p_up_i'])\n                else:\n                    ub_i = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])\n                dispatch_result[i] = ub_i\n    \n    else:\n        candidates = []\n        for i in free_on:\n            if i in online_set and i in dispatch_result:\n                if units_info[i]['u_i_0'] == 1:\n                    lb_i = max(units_info[i]['p_min_i'], units_info[i]['p_i_0'] - units_info[i]['p_down_i'])\n                else:\n                    lb_i = units_info[i]['p_min_i']\n                if abs(dispatch_result[i] - lb_i) < 1e-5:\n                    saving = units_info[i]['a_i'] + units_info[i]['b_i'] * dispatch_result[i] + units_info[i]['c_i'] * (dispatch_result[i] ** 2)\n                    candidates.append((saving, i))\n        \n        candidates.sort(key=lambda x: x[0], reverse=True)\n        for saving, i in candidates:\n            new_online_set = [j for j in online_set if j != i]\n            new_online_units = [{'index': j, **units_info[j]} for j in new_online_set]\n            new_dispatch, _ = economic_dispatch(new_online_units, current_load)\n            if new_dispatch is not None:\n                online_set = new_online_set\n                dispatch_result = new_dispatch\n                break\n    \n    schedules = np.zeros((2, n_units))\n    for i in range(n_units):\n        if i in online_set and i in dispatch_result:\n            schedules[0, i] = 1\n            schedules[1, i] = dispatch_result[i]\n        else:\n            schedules[0, i] = 0\n            schedules[1, i] = 0\n    \n    return schedules",
          "from": null,
          "gap_power_rate": 0.00088,
          "gap_price_rate": 0.0224,
          "fitness": 0.01164
     },
     {
          "name": "rolling_unit_commitment_heuristic_refined",
          "algorithm": "1. Classify units into must-on, must-off, free-on, and free-off based on min up/downtime and shutdown constraints\n2. Start with must-on and free-on units committed\n3. Compute effective min/max outputs considering ramp constraints for committed units\n4. Decommit free-on units with highest (min_output \u00d7 cost per MW) if total minimum exceeds load, maintaining feasibility\n5. Commit free-off units with lowest (startup_cost + min_output_cost)/min_output if max capacity is insufficient\n6. Perform economic dispatch by:\n   a. Setting committed units to effective minimum outputs\n   b. Distributing remaining load to units with lowest marginal costs\n   c. Adjusting downwards if over-allocated using highest marginal costs\n7. Return commitment states and power outputs\n\n",
          "code": "import numpy as np\nimport copy\n\ndef rolling_unit_commitment_heuristic_refined(units_info, load):\n    # Create a working copy to avoid modifying input\n    units = copy.deepcopy(units_info)\n    current_load = load[0]\n    \n    # Classify units\n    must_on_units = []\n    must_off_units = []\n    free_on_units = []\n    free_off_units = []\n    \n    for unit in units:\n        if unit['u_i_0'] == 1:\n            # Check if must remain on\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (unit['p_i_0'] > unit['p_shut_i']):\n                must_on_units.append(unit)\n            else:\n                free_on_units.append(unit)\n        else:\n            # Check if must remain off\n            if abs(unit['t_i_0']) < unit['t_off_min_i']:\n                must_off_units.append(unit)\n            else:\n                free_off_units.append(unit)\n    \n    # Initial commitment\n    committed_set = must_on_units + free_on_units\n    for unit in must_off_units:\n        unit['u_i'] = 0\n        unit['p_i'] = 0\n    \n    # Compute effective min/max outputs\n    for unit in committed_set:\n        # Online units\n        min_eff = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_eff = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        unit['min_eff'] = min_eff\n        unit['max_eff'] = max_eff\n    \n    for unit in free_off_units:\n        # Offline units that may be started\n        min_eff = unit['p_min_i']\n        max_eff = min(unit['p_max_i'], unit['p_start_i'])\n        unit['min_eff'] = min_eff\n        unit['max_eff'] = max_eff\n    \n    # Calculate total min and max capacity\n    total_min = sum(unit['min_eff'] for unit in committed_set)\n    total_max = sum(unit['max_eff'] for unit in committed_set)\n    \n    # Decommit free-on units if over-committed\n    free_on_units.sort(key=lambda u: (u['min_eff'] * (u['a_i'] + u['b_i']*u['min_eff'] + u['c_i']*u['min_eff']**2) / u['min_eff']), \n                     reverse=True)\n    to_remove = []\n    for unit in free_on_units:\n        if total_min <= current_load:\n            break\n        new_min = total_min - unit['min_eff']\n        new_max = total_max - unit['max_eff']\n        if new_min <= current_load and new_max >= current_load:\n            total_min = new_min\n            total_max = new_max\n            committed_set.remove(unit)\n            to_remove.append(unit)\n    for unit in to_remove:\n        free_on_units.remove(unit)\n    \n    # Commit free-off units if under-capacity\n    if total_max < current_load:\n        free_off_units.sort(key=lambda u: (u['s_i'] + u['a_i'] + u['b_i']*u['min_eff'] + u['c_i']*u['min_eff']**2) / u['min_eff'])\n        to_commit = []\n        for unit in free_off_units:\n            if total_max >= current_load:\n                break\n            total_min += unit['min_eff']\n            total_max += unit['max_eff']\n            committed_set.append(unit)\n            to_commit.append(unit)\n        for unit in to_commit:\n            free_off_units.remove(unit)\n    \n    # Initialize power outputs\n    total_p = 0\n    for unit in committed_set:\n        unit['u_i'] = 1\n        unit['p_i'] = unit['min_eff']\n        total_p += unit['min_eff']\n    \n    # Economic dispatch: allocate remaining load\n    remaining = current_load - total_p\n    if remaining > 0:  # Increase production\n        units_sorted = sorted(committed_set, key=lambda u: u['b_i'] + 2*u['c_i']*u['p_i'])\n        for unit in units_sorted:\n            if remaining <= 0:\n                break\n            avail = unit['max_eff'] - unit['p_i']\n            if avail > 0:\n                amount = min(remaining, avail)\n                unit['p_i'] += amount\n                remaining -= amount\n    elif remaining < 0:  # Decrease production\n        remaining = -remaining\n        units_sorted = sorted(committed_set, key=lambda u: u['b_i'] + 2*u['c_i']*u['p_i'], reverse=True)\n        for unit in units_sorted:\n            if remaining <= 0:\n                break\n            avail = unit['p_i'] - unit['min_eff']\n            if avail > 0:\n                amount = min(remaining, avail)\n                unit['p_i'] -= amount\n                remaining -= amount\n    \n    # Set decommitted units to zero\n    decommitted = free_off_units + must_off_units + free_on_units\n    for unit in decommitted:\n        unit['u_i'] = 0\n        unit['p_i'] = 0\n    \n    # Prepare output\n    schedules = np.zeros((2, len(units)))\n    for i, unit in enumerate(units):\n        schedules[0, i] = unit['u_i']\n        schedules[1, i] = unit['p_i']\n    \n    return schedules",
          "from": "mutation",
          "gap_power_rate": 0.018897445,
          "gap_price_rate": 0.0118576912,
          "fitness": 0.0153775681
     },
     {
          "name": "dynamic_priority_dispatch",
          "algorithm": "1. Classify units into must-on (insufficient up-time or above shutdown capacity), must-off (insufficient down-time), free-on (online and can turn off), and free-off (offline and can turn on).\n2. Initial commitment: must-on and free-on units.\n3. While total minimum output > current load and free-on units available, turn off free-on units by descending minimum output (ramp-down constrained).\n4. For free-off units (sorted by ascending (startup cost + production cost at p_min)/p_min), add units if total min \u2264 load. Stop when total max \u2265 load.\n5. Dispatch:\n   a) Compute min/max outputs considering ramp/start constraints.\n   b) Initialize outputs to min. Calculate deficit (load - total min) and headroom (total max - total min).\n   c) If deficit \u2264 headroom, distribute load incrementally using merit order of marginal cost at min output.\n   d) Else, set outputs to max (under-committed).\n6. Return unit states and power outputs.\n\n",
          "code": "import numpy as np\n\ndef dynamic_priority_dispatch(units_info, load):\n    current_load = load[0]  # Current time step load\n    n_units = len(units_info)\n    if n_units == 0:\n        return np.zeros((2, 0))\n    \n    # Initialize sets\n    must_on = set()\n    must_off = set()\n    free_on = set()\n    free_off = set()\n    \n    # Classify units\n    for i, unit in enumerate(units_info):\n        u0 = unit['u_i_0']\n        t0 = unit['t_i_0']\n        p0 = unit['p_i_0']\n        t_on_min = unit['t_on_min_i']\n        t_off_min = unit['t_off_min_i']\n        p_shut = unit['p_shut_i']\n        \n        if u0 == 1:\n            if t0 < t_on_min or p0 > p_shut:\n                must_on.add(i)\n            else:\n                free_on.add(i)\n        else:\n            if t0 < 0 and (-t0) < t_off_min:\n                must_off.add(i)\n            else:\n                free_off.add(i)\n    \n    # Initial commitment: must-on and free-on units\n    committed = must_on | free_on\n    \n    # Step 1: Compute initial min outputs for online units (ramp-down constrained)\n    min_i_dict = {}\n    max_i_dict = {}\n    for i in committed:\n        unit = units_info[i]\n        min_output = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_output = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        min_i_dict[i] = min_output\n        max_i_dict[i] = max_output\n    \n    # Compute total min and max for the committed units\n    total_min = sum(min_i_dict[i] for i in committed)\n    total_max = sum(max_i_dict[i] for i in committed)\n    \n    # Step 2: Turn off free-on units if over-committed (min output > load)\n    free_on_in_committed = [i for i in committed if i in free_on]\n    # Sort free-on by min_output (descending)\n    free_on_in_committed.sort(key=lambda i: min_i_dict[i], reverse=True)\n    \n    for i in free_on_in_committed:\n        if total_min <= current_load:\n            break\n        committed.remove(i)\n        total_min -= min_i_dict[i]\n        total_max -= max_i_dict[i]\n    \n    # Step 3: Compute min and max for online units in committed set again\n    min_i_dict = {i: min_i_dict[i] for i in committed}\n    max_i_dict = {i: max_i_dict[i] for i in committed}\n    \n    # Compute cost per MW for free-off units: (startup + cost at p_min) / p_min\n    free_off_avail = sorted(free_off, key=lambda i: \n        (units_info[i]['s_i'] + units_info[i]['a_i'] + \n         units_info[i]['b_i'] * units_info[i]['p_min_i'] + \n         units_info[i]['c_i'] * (units_info[i]['p_min_i'] ** 2)) / \n        (units_info[i]['p_min_i'] if units_info[i]['p_min_i'] > 0 else 1e9))\n    \n    # Add free-off units until meeting load, prioritizing low cost per MW\n    total_min_current = total_min\n    total_max_current = total_max\n    \n    for i in free_off_avail:\n        if total_max_current >= current_load:\n            break\n        unit = units_info[i]\n        p_min = unit['p_min_i']\n        p_max = min(unit['p_max_i'], unit['p_start_i'])\n        if total_min_current + p_min <= current_load: \n            committed.add(i)\n            total_min_current += p_min\n            total_max_current += p_max\n            # Precompute min/max for dispatch\n            min_i_dict[i] = p_min\n            max_i_dict[i] = p_max\n    \n    # Step 4: Dispatch\n    # Compute min/max for final committed set (considering start/ramp constraints)\n    min_dict = {}\n    max_dict = {}\n    for i in committed:\n        unit = units_info[i]\n        if unit['u_i_0'] == 1:  # Was online\n            min_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            max_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:  # Started\n            min_i = unit['p_min_i']\n            max_i = min(unit['p_max_i'], unit['p_start_i'])\n        min_dict[i] = min_i\n        max_dict[i] = max_i\n    \n    total_min_sum = sum(min_dict.values())\n    total_max_sum = sum(max_dict.values())\n    \n    # Calculate deficit and headroom\n    deficit = current_load - total_min_sum\n    headroom = total_max_sum - total_min_sum\n    p_dict = {i: min_dict[i] for i in committed}\n    \n    # Distribute deficit or handle under-commitment\n    if deficit <= headroom and deficit >= 0:\n        # Sort by marginal cost (incremental at min output)\n        committed_list = sorted(committed, \n                               key=lambda i: units_info[i]['b_i'] + 2 * units_info[i]['c_i'] * min_dict[i])\n        \n        for i in committed_list:\n            if deficit <= 0:\n                break\n            avail = max_dict[i] - min_dict[i]\n            add_amount = min(avail, deficit)\n            p_dict[i] += add_amount\n            deficit -= add_amount\n    elif deficit > headroom:  # Under-committed: set to max\n        for i in committed:\n            p_dict[i] = max_dict[i]\n    \n    # Build output vectors\n    u_vector = np.zeros(n_units)\n    p_vector = np.zeros(n_units)\n    \n    for i in range(n_units):\n        if i in p_dict:\n            u_vector[i] = 1\n            p_vector[i] = p_dict[i]\n    \n    return np.array([u_vector, p_vector])",
          "from": "crossover",
          "gap_power_rate": 0.0001296784,
          "gap_price_rate": 0.0346418817,
          "fitness": 0.0173857801
     },
     {
          "name": "rolling_priority_dispatch",
          "algorithm": "1. Classify units into must-on (min up-time unfulfilled or shutdown constraint violation), must-off (min down-time unfulfilled), free-on (online and freely decommitable), and free-off (offline and freely commitable).\n2. Initially commit must-on and free-on units. Compute effective min/max outputs considering ramp constraints for units remaining online.\n3. While total min output > load, decommit free-on units in descending order of min output to resolve over-commitment.\n4. While total max output < load, commit free-off units in ascending order of (startup cost + cost at min output)/min output to resolve under-commitment, using startup ramp limits for new units.\n5. For final committed set:\n   - If load \u2264 total min, set all units to min output\n   - If load \u2265 total max, set all units to max output\n   - Else perform lambda iteration economic dispatch respecting ramp constraints\n6. Set non-committed units to offline state and zero output.\n",
          "code": "import numpy as np\n\ndef rolling_priority_dispatch(units_info, load):\n    current_load = load[0]\n    n_units = len(units_info)\n    \n    # Initialize classification lists\n    must_on, must_off, free_on, free_off = [], [], [], []\n    \n    # Classify units\n    for i, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1:  # Online last period\n            if (unit['t_i_0'] < unit['t_on_min_i']) or (unit['p_i_0'] > unit['p_shut_i']):\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:  # Offline last period\n            if -unit['t_i_0'] < unit['t_off_min_i']:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    # Initialize committed units and bounds\n    committed = set(must_on)\n    committed.update(free_on)\n    lb, ub = [0]*n_units, [0]*n_units\n    \n    # Compute bounds for initial committed units\n    for i in committed:\n        unit = units_info[i]\n        lb[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        ub[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n    \n    total_min = sum(lb[i] for i in committed)\n    total_max = sum(ub[i] for i in committed)\n    \n    # Handle over-commitment: turn off free-on units\n    free_on_committed = [i for i in free_on if i in committed]\n    free_on_committed.sort(key=lambda i: lb[i], reverse=True)\n    \n    for i in free_on_committed:\n        if total_min <= current_load:\n            break\n        committed.remove(i)\n        total_min -= lb[i]\n        total_max -= ub[i]\n    \n    # Handle under-commitment: turn on free-off units\n    if total_max < current_load:\n        def cost_metric(i):\n            unit = units_info[i]\n            min_cost = unit['a_i'] + unit['b_i']*unit['p_min_i'] + unit['c_i']*(unit['p_min_i']**2)\n            return (unit['s_i'] + min_cost) / unit['p_min_i']\n        \n        free_off_sorted = sorted(free_off, key=cost_metric)\n        \n        for i in free_off_sorted:\n            if total_max >= current_load:\n                break\n            unit = units_info[i]\n            lb[i] = unit['p_min_i']\n            ub[i] = min(unit['p_max_i'], unit['p_start_i'])\n            committed.add(i)\n            total_min += lb[i]\n            total_max += ub[i]\n    \n    # Prepare for dispatch\n    u_out = [0]*n_units\n    p_out = [0.0]*n_units\n    \n    # Case 1: Load below total min capacity\n    if current_load <= total_min:\n        for i in committed:\n            p_out[i] = lb[i]\n            u_out[i] = 1\n    \n    # Case 2: Load above total max capacity\n    elif current_load >= total_max:\n        for i in committed:\n            p_out[i] = ub[i]\n            u_out[i] = 1\n    \n    # Case 3: Dispatch needed\n    else:\n        # Collect committed unit parameters\n        indices, b_list, c_list, lb_list, ub_list = [], [], [], [], []\n        for i in committed:\n            unit = units_info[i]\n            indices.append(i)\n            b_list.append(unit['b_i'])\n            c_list.append(unit['c_i'])\n            lb_list.append(lb[i])\n            ub_list.append(ub[i])\n        \n        # Lambda iteration setup\n        lo_lambda = min(b_i + 2*c_i*lb_i for (b_i, c_i, lb_i) in zip(b_list, c_list, lb_list))\n        hi_lambda = max(b_i + 2*c_i*ub_i for (b_i, c_i, ub_i) in zip(b_list, c_list, ub_list))\n        tol, max_iter = 1e-6, 1000\n        \n        # Bisection loop\n        for _ in range(max_iter):\n            mid_lambda = (lo_lambda + hi_lambda) / 2\n            total_p = 0.0\n            for j in range(len(indices)):\n                if c_list[j] > 0:\n                    p_j = (mid_lambda - b_list[j]) / (2 * c_list[j])\n                else:\n                    p_j = lb_list[j]\n                p_j = max(lb_list[j], min(ub_list[j], p_j))\n                total_p += p_j\n            \n            if abs(total_p - current_load) < tol:\n                break\n            if total_p < current_load:\n                lo_lambda = mid_lambda\n            else:\n                hi_lambda = mid_lambda\n        \n        # Set final dispatch values\n        for j in range(len(indices)):\n            if c_list[j] > 0:\n                p_j = (mid_lambda - b_list[j]) / (2 * c_list[j])\n            else:\n                p_j = lb_list[j]\n            p_out[indices[j]] = max(lb_list[j], min(ub_list[j], p_j))\n            u_out[indices[j]] = 1\n    \n    return np.array([u_out, p_out])",
          "from": "crossover",
          "gap_power_rate": 0.0001296785,
          "gap_price_rate": 0.0360463335,
          "fitness": 0.018088006
     },
     {
          "name": "refined_dynamic_commitment",
          "algorithm": "1. Determine forced commitment states for each unit: must remain on if not meeting min uptime or previous output exceeds shutdown limit; must remain off if not meeting min downtime.\n2. Initialize commitment: commit must-run units and free-on units (online units not forced on).\n3. Compute effective min/max outputs considering ramp constraints for committed units: \n   - Online units: [max(p_min, previous_p - ramp_down), min(p_max, previous_p + ramp_up)]\n   - Starting units: [p_min, min(p_max, start_ramp)]\n4. If total min output exceeds load:\n   - Sort free-on units by descending production cost at min output\n   - Turn off units that don't compromise total max capacity below load\n5. If total max output is below load:\n   - Sort free-off units by ascending (startup_cost + min_output_cost)\n   - Turn on units until total capacity meets/exceeds load\n6. For committed units:\n   - Clamp target load between total min/max capacity\n   - Use lambda iteration for economic dispatch with quadratic cost minimization:\n     * Bisect lambda to find marginal cost\n     * Compute unconstrained outputs with lambda\n     * Clamp outputs to feasible ranges\n     * Adjust outputs to exactly meet target\n7. Set outputs to 0 for non-committed units\n\n",
          "code": "import numpy as np\n\ndef refined_dynamic_commitment(units_info, load):\n    current_load = load[0]\n    num_units = len(units_info)\n    u = np.zeros(num_units)\n    p = np.zeros(num_units)\n    min_i = np.zeros(num_units)\n    max_i = np.zeros(num_units)\n    committed = np.zeros(num_units, dtype=bool)\n    must_on = np.zeros(num_units, dtype=bool)\n    must_off = np.zeros(num_units, dtype=bool)\n    free_on = []\n    free_off = []\n    \n    # Step 1: Determine forced commitment states\n    for i, unit in enumerate(units_info):\n        u0 = unit['u_i_0']\n        p0 = unit['p_i_0']\n        t0 = unit['t_i_0']\n        t_on = unit['t_on_min_i']\n        t_off = unit['t_off_min_i']\n        p_shut = unit['p_shut_i']\n        \n        if u0 == 1:\n            if t0 < t_on or p0 > p_shut:\n                must_on[i] = True\n        else:\n            if abs(t0) < t_off:\n                must_off[i] = True\n                \n    # Classify units and initial commitment\n    for i in range(num_units):\n        if must_on[i]:\n            committed[i] = True\n            u[i] = 1\n        elif must_off[i]:\n            committed[i] = False\n            u[i] = 0\n        else:\n            if units_info[i]['u_i_0'] == 1:\n                free_on.append(i)\n                committed[i] = True\n                u[i] = 1\n            else:\n                free_off.append(i)\n                committed[i] = False\n                u[i] = 0\n    \n    # Compute min/max outputs for committed units\n    total_min = 0.0\n    total_max = 0.0\n    for i in range(num_units):\n        if committed[i]:\n            unit = units_info[i]\n            if unit['u_i_0'] == 1:  # Was online\n                min_i[i] = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                max_i[i] = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:  # Starting up\n                min_i[i] = unit['p_min_i']\n                max_i[i] = min(unit['p_max_i'], unit['p_start_i'])\n            total_min += min_i[i]\n            total_max += max_i[i]\n    \n    # Step 4: Reduce over-commitment\n    if total_min > current_load:\n        free_on_sorted = sorted(free_on, \n            key=lambda i: (units_info[i]['a_i'] + units_info[i]['b_i']*min_i[i] + \n                           units_info[i]['c_i']*min_i[i]**2), \n            reverse=True)\n        for i in free_on_sorted:\n            if total_min <= current_load:\n                break\n            if total_max - max_i[i] >= current_load:\n                committed[i] = False\n                u[i] = 0\n                total_min -= min_i[i]\n                total_max -= max_i[i]\n    \n    # Step 5: Increase under-capacity\n    if total_max < current_load:\n        free_off_sorted = sorted(free_off, \n            key=lambda i: (units_info[i]['s_i'] + units_info[i]['a_i'] + \n                           units_info[i]['b_i']*units_info[i]['p_min_i'] + \n                           units_info[i]['c_i']*(units_info[i]['p_min_i']**2)))\n        for i in free_off_sorted:\n            if total_max >= current_load:\n                break\n            min_start = units_info[i]['p_min_i']\n            max_start = min(units_info[i]['p_max_i'], units_info[i]['p_start_i'])\n            committed[i] = True\n            u[i] = 1\n            min_i[i] = min_start\n            max_i[i] = max_start\n            total_min += min_start\n            total_max += max_start\n    \n    # Prepare for dispatch\n    target = max(total_min, min(total_max, current_load))\n    committed_indices = [i for i in range(num_units) if committed[i]]\n    \n    # Step 6: Economic dispatch with lambda iteration\n    if committed_indices:\n        # Find valid lambda bounds\n        low_lambda, high_lambda = float('inf'), float('-inf')\n        for i in committed_indices:\n            unit = units_info[i]\n            b, c = unit['b_i'], unit['c_i']\n            if c == 0:\n                marginal_cost = b\n            else:\n                marginal_min = b + 2 * c * min_i[i]\n                marginal_max = b + 2 * c * max_i[i]\n                low_lambda = min(low_lambda, marginal_min)\n                high_lambda = max(high_lambda, marginal_max)\n        low_lambda = max(0, low_lambda - 10)\n        high_lambda += 10\n        \n        # Bisect lambda\n        for _ in range(100):\n            mid_lambda = (low_lambda + high_lambda) / 2\n            total_p = 0\n            for i in committed_indices:\n                unit = units_info[i]\n                b, c = unit['b_i'], unit['c_i']\n                if c == 0:\n                    p_i = max_i[i] if mid_lambda >= b else min_i[i]\n                else:\n                    p_ideal = (mid_lambda - b) / (2 * c)\n                    p_i = max(min_i[i], min(max_i[i], p_ideal))\n                total_p += p_i\n            \n            if total_p < target:\n                low_lambda = mid_lambda\n            else:\n                high_lambda = mid_lambda\n        \n        # Apply final dispatch\n        total_p = 0\n        for i in committed_indices:\n            unit = units_info[i]\n            b, c = unit['b_i'], unit['c_i']\n            if c == 0:\n                p_i = max_i[i] if low_lambda >= b else min_i[i]\n            else:\n                p_ideal = (low_lambda - b) / (2 * c)\n                p_i = max(min_i[i], min(max_i[i], p_ideal))\n            p[i] = p_i\n            total_p += p_i\n        \n        # Adjust for any remaining gap\n        gap = target - total_p\n        if abs(gap) > 1e-5:\n            if gap > 0:  # Increase under-producing units\n                idx_sorted = sorted(committed_indices,\n                    key=lambda i: units_info[i]['b_i'] + 2 * units_info[i]['c_i'] * p[i])\n                for i in idx_sorted:\n                    if gap <= 0: break\n                    if p[i] < max_i[i]:\n                        add = min(gap, max_i[i] - p[i])\n                        p[i] += add\n                        gap -= add\n            else:  # Decrease over-producing units\n                idx_sorted = sorted(committed_indices,\n                    key=lambda i: -(units_info[i]['b_i'] + 2 * units_info[i]['c_i'] * p[i]))\n                for i in idx_sorted:\n                    if gap >= 0: break\n                    if p[i] > min_i[i]:\n                        reduce = min(-gap, p[i] - min_i[i])\n                        p[i] -= reduce\n                        gap += reduce\n    \n    # Prepare output\n    schedules = np.zeros((2, num_units))\n    for i in range(num_units):\n        schedules[0, i] = u[i]\n        schedules[1, i] = p[i]\n    \n    return schedules",
          "from": "mutation",
          "gap_power_rate": 7.16921e-05,
          "gap_price_rate": 0.0462636844,
          "fitness": 0.0231676883
     },
     {
          "name": "commit_units_heuristic",
          "algorithm": "1. Identify must-on units (units that must remain on due to minimum up-time or shutdown constraints) and must-off units (units that must remain off due to minimum down-time constraints).\n2. Group remaining units into group1 (units that were on) and group2 (units that were off).\n3. Start with must-on and group1 units committed. Compute effective minimum and maximum outputs considering ramp constraints.\n4. If total effective minimum output exceeds load, decommit the most expensive group1 units (not must-on) until the total effective minimum is <= load and total effective maximum >= load.\n5. If total effective maximum output is below load, commit additional group2 units in ascending order of cost per MW at minimum output until total effective maximum >= load.\n6. Perform economic dispatch: set committed units to their effective minimum outputs, then distribute remaining load to units with the smallest incremental cost, respecting maximum output constraints.\n7. Return commitment states and power outputs for all units.\n\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    load_current = load[0]\n    n_units = len(units_info)\n    \n    must_on = []\n    must_off = []\n    group1 = []\n    group2 = []\n    \n    for i, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        t_i0 = unit['t_i_0']\n        p_i0 = unit['p_i_0']\n        t_on_min = unit['t_on_min_i']\n        t_off_min = unit['t_off_min_i']\n        p_shut = unit['p_shut_i']\n        \n        if u_i0 == 1:\n            if t_i0 < t_on_min or p_i0 > p_shut:\n                must_on.append(i)\n        else:\n            if t_i0 > -t_off_min:\n                must_off.append(i)\n                \n    for i in range(n_units):\n        if i in must_on or i in must_off:\n            continue\n        if units_info[i]['u_i_0'] == 1:\n            group1.append(i)\n        else:\n            group2.append(i)\n            \n    committed_indices = must_on + group1\n    \n    def compute_bounds(indices):\n        total_min = 0.0\n        total_max = 0.0\n        for i in indices:\n            unit = units_info[i]\n            if unit['u_i_0'] == 1:\n                low = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                high = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:\n                low = unit['p_min_i']\n                high = min(unit['p_max_i'], unit['p_start_i'])\n            total_min += low\n            total_max += high\n        return total_min, total_max\n        \n    total_min, total_max = compute_bounds(committed_indices)\n    \n    if total_min > load_current:\n        decommit_candidates = [i for i in group1 if i not in must_on]\n        candidate_list = []\n        for i in decommit_candidates:\n            unit = units_info[i]\n            if unit['u_i_0'] == 1:\n                low_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            else:\n                low_i = unit['p_min_i']\n            inc_cost = unit['b_i'] + 2 * unit['c_i'] * low_i\n            candidate_list.append((inc_cost, i))\n        candidate_list.sort(key=lambda x: x[0], reverse=True)\n        \n        for inc, i in candidate_list:\n            unit = units_info[i]\n            if unit['u_i_0'] == 1:\n                low_i = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n                high_i = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:\n                low_i = unit['p_min_i']\n                high_i = min(unit['p_max_i'], unit['p_start_i'])\n            new_total_min = total_min - low_i\n            new_total_max = total_max - high_i\n            if new_total_min <= load_current and new_total_max >= load_current:\n                committed_indices.remove(i)\n                total_min = new_total_min\n                total_max = new_total_max\n            if total_min <= load_current:\n                break\n                \n    if total_max < load_current:\n        candidate_list = []\n        for i in group2:\n            unit = units_info[i]\n            p_min = unit['p_min_i']\n            s_i = unit['s_i']\n            a_i = unit['a_i']\n            b_i = unit['b_i']\n            c_i = unit['c_i']\n            cost_at_min = a_i + b_i * p_min + c_i * p_min**2\n            cost_per_mw = (s_i + cost_at_min) / p_min\n            candidate_list.append((cost_per_mw, i))\n        candidate_list.sort(key=lambda x: x[0])\n        \n        for cost_per_mw, i in candidate_list:\n            unit = units_info[i]\n            p_min = unit['p_min_i']\n            effective_max = min(unit['p_max_i'], unit['p_start_i'])\n            new_total_min = total_min + p_min\n            new_total_max = total_max + effective_max\n            committed_indices.append(i)\n            total_min = new_total_min\n            total_max = new_total_max\n            if total_max >= load_current:\n                break\n                \n    low_bounds = {}\n    high_bounds = {}\n    for i in committed_indices:\n        unit = units_info[i]\n        if unit['u_i_0'] == 1:\n            low_b = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            high_b = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            low_b = unit['p_min_i']\n            high_b = min(unit['p_max_i'], unit['p_start_i'])\n        low_bounds[i] = low_b\n        high_bounds[i] = high_b\n        \n    p_vals = [0.0] * n_units\n    for i in committed_indices:\n        p_vals[i] = low_bounds[i]\n        \n    total_p = sum(p_vals[i] for i in committed_indices)\n    remaining = load_current - total_p\n    \n    while remaining > 0:\n        min_inc = float('inf')\n        candidate = None\n        for i in committed_indices:\n            if p_vals[i] < high_bounds[i]:\n                inc = units_info[i]['b_i'] + 2 * units_info[i]['c_i'] * p_vals[i]\n                if inc < min_inc:\n                    min_inc = inc\n                    candidate = i\n        if candidate is None:\n            break\n        available = high_bounds[candidate] - p_vals[candidate]\n        if available > remaining:\n            p_vals[candidate] += remaining\n            remaining = 0\n        else:\n            p_vals[candidate] += available\n            remaining -= available\n            \n    u_schedule = [0] * n_units\n    p_schedule = [0.0] * n_units\n    for i in range(n_units):\n        if i in committed_indices:\n            u_schedule[i] = 1\n            p_schedule[i] = p_vals[i]\n        else:\n            u_schedule[i] = 0\n            p_schedule[i] = 0.0\n            \n    schedules = np.array([u_schedule, p_schedule])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.00023,
          "gap_price_rate": 0.04855,
          "fitness": 0.02439
     },
     {
          "name": "commit_units_heuristic",
          "algorithm": "The heuristic classifies units into must-on, must-off, free-on, and free-off based on their previous state and constraints. Must-on units are set to their minimum output considering ramp-down limits. Free-on units are initially set to their minimum output. If total output exceeds load, free-on units are turned off in descending order of output to minimize overproduction. If total output is below load, on units are increased in merit order of marginal cost. If a deficit remains, free-off units are turned on in ascending order of average cost per MW at minimum output, set to the minimum output plus any remaining deficit within limits.\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    current_load = load[0]\n    n = len(units_info)\n    u = [0] * n\n    p = [0] * n\n    \n    must_on_indices = []\n    must_off_indices = []\n    free_on_indices = []\n    free_off_indices = []\n    \n    for idx, unit in enumerate(units_info):\n        if unit['u_i_0'] == 1 and (unit['t_i_0'] < unit['t_on_min_i'] or unit['p_i_0'] > unit['p_shut_i']):\n            must_on_indices.append(idx)\n        elif unit['u_i_0'] == 0 and -unit['t_i_0'] < unit['t_off_min_i']:\n            must_off_indices.append(idx)\n        else:\n            if unit['u_i_0'] == 1:\n                free_on_indices.append(idx)\n            else:\n                free_off_indices.append(idx)\n    \n    for idx in must_on_indices:\n        unit = units_info[idx]\n        min_output = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_output = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        u[idx] = 1\n        p[idx] = min_output\n        unit['min_output'] = min_output\n        unit['max_output'] = max_output\n    \n    for idx in free_on_indices:\n        unit = units_info[idx]\n        min_output = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n        max_output = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        u[idx] = 1\n        p[idx] = min_output\n        unit['min_output'] = min_output\n        unit['max_output'] = max_output\n    \n    for idx in must_off_indices + free_off_indices:\n        u[idx] = 0\n        p[idx] = 0\n    \n    total = sum(p)\n    \n    if total > current_load:\n        candidate_indices = free_on_indices.copy()\n        candidate_indices.sort(key=lambda idx: p[idx], reverse=True)\n        new_total = total\n        for idx in candidate_indices:\n            candidate_total = new_total - p[idx]\n            if candidate_total >= current_load:\n                u[idx] = 0\n                p[idx] = 0\n                new_total = candidate_total\n            else:\n                gap1 = new_total - current_load\n                gap2 = current_load - candidate_total\n                if gap2 < gap1:\n                    u[idx] = 0\n                    p[idx] = 0\n                    new_total = candidate_total\n                break\n        total = new_total\n    \n    if total < current_load:\n        deficit = current_load - total\n        on_indices = [idx for idx in must_on_indices + free_on_indices if u[idx] == 1]\n        on_indices_sorted = sorted(on_indices, key=lambda idx: units_info[idx]['b_i'] + 2 * units_info[idx]['c_i'] * p[idx])\n        \n        for idx in on_indices_sorted:\n            if deficit <= 0:\n                break\n            unit = units_info[idx]\n            headroom = unit['max_output'] - p[idx]\n            if headroom > 0:\n                increase = min(headroom, deficit)\n                p[idx] += increase\n                deficit -= increase\n                total += increase\n        \n        if deficit > 0:\n            candidate_indices = free_off_indices.copy()\n            candidate_indices.sort(key=lambda idx: (units_info[idx]['s_i'] + units_info[idx]['a_i'] + \n                                                   units_info[idx]['b_i'] * units_info[idx]['p_min_i'] + \n                                                   units_info[idx]['c_i'] * (units_info[idx]['p_min_i'] ** 2)) / \n                                                   units_info[idx]['p_min_i'] if units_info[idx]['p_min_i'] > 0 else float('inf'))\n            for idx in candidate_indices:\n                if deficit <= 0:\n                    break\n                unit = units_info[idx]\n                min_output = unit['p_min_i']\n                max_output = min(unit['p_max_i'], unit['p_start_i'])\n                output = min(min_output + deficit, max_output)\n                u[idx] = 1\n                p[idx] = output\n                total += output\n                deficit -= output\n    \n    schedules = np.array([u, p])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.00109,
          "gap_price_rate": 0.05225,
          "fitness": 0.02667
     },
     {
          "name": "commit_units_heuristic",
          "algorithm": "1. Classify units into must-on (units that must remain on due to min up-time or shutdown ramp constraints), must-off (units that must remain off due to min down-time constraints), free-on (free units currently on that can be turned off), and free-off (free units currently off that can be turned on).\n2. Start with must-on and free-on units committed. If current load is below their total minimum output, turn off eligible free-on units (previous output \u2264 shutdown ramp limit) in descending order of minimum output until total minimum \u2264 load or no eligible units remain.\n3. If current load exceeds total maximum output of committed units, turn on free-off units in ascending order of startup cost plus production cost at minimum output until total maximum \u2265 load or no units remain.\n4. Dispatch load to committed units by initializing outputs at feasible lower bounds, then adjusting using incremental costs (cheapest units increased first when below target, most expensive decreased first when above target) while respecting ramp and output limits.\n\n",
          "code": "import numpy as np\n\ndef commit_units_heuristic(units_info, load):\n    n_units = len(units_info)\n    must_on_indices = []\n    must_off_indices = []\n    free_on_indices = []\n    free_off_indices = []\n    \n    for idx, unit in enumerate(units_info):\n        u_i0 = unit['u_i_0']\n        t_i0 = unit['t_i_0']\n        p_i0 = unit['p_i_0']\n        if u_i0 == 1:\n            if t_i0 < unit['t_on_min_i'] or p_i0 > unit['p_shut_i']:\n                must_on_indices.append(idx)\n            else:\n                free_on_indices.append(idx)\n        else:\n            if abs(t_i0) < unit['t_off_min_i']:\n                must_off_indices.append(idx)\n            else:\n                free_off_indices.append(idx)\n    \n    on_indices = must_on_indices + free_on_indices\n    off_indices = must_off_indices + free_off_indices\n    \n    total_min = sum(units_info[i]['p_min_i'] for i in on_indices)\n    total_max = sum(units_info[i]['p_max_i'] for i in on_indices)\n    current_load = load[0]\n    \n    if current_load < total_min:\n        candidate_off = [idx for idx in free_on_indices if units_info[idx]['p_i_0'] <= units_info[idx]['p_shut_i']]\n        candidate_off.sort(key=lambda idx: units_info[idx]['p_min_i'], reverse=True)\n        for idx in candidate_off:\n            total_min -= units_info[idx]['p_min_i']\n            total_max -= units_info[idx]['p_max_i']\n            on_indices.remove(idx)\n            off_indices.append(idx)\n            if total_min <= current_load:\n                break\n                \n    if current_load > total_max:\n        candidate_on = []\n        for idx in free_off_indices:\n            unit = units_info[idx]\n            cost = unit['s_i'] + unit['a_i'] + unit['b_i'] * unit['p_min_i'] + unit['c_i'] * (unit['p_min_i'] ** 2)\n            candidate_on.append((idx, cost))\n        candidate_on.sort(key=lambda x: x[1])\n        for idx, _ in candidate_on:\n            total_min += units_info[idx]['p_min_i']\n            total_max += units_info[idx]['p_max_i']\n            on_indices.append(idx)\n            off_indices.remove(idx)\n            if total_max >= current_load:\n                break\n                \n    target = min(max(total_min, current_load), total_max)\n    p = [0.0] * n_units\n    u = [0] * n_units\n    for idx in on_indices:\n        u[idx] = 1\n        unit = units_info[idx]\n        if unit['u_i_0'] == 1:\n            low_bound = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            high_bound = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n        else:\n            low_bound = unit['p_min_i']\n            high_bound = min(unit['p_max_i'], unit['p_start_i'])\n        p[idx] = low_bound\n        \n    total_p = sum(p)\n    \n    if total_p < target:\n        inc_units = []\n        for idx in on_indices:\n            unit = units_info[idx]\n            current_p = p[idx]\n            if unit['u_i_0'] == 1:\n                high_bound = min(unit['p_max_i'], unit['p_i_0'] + unit['p_up_i'])\n            else:\n                high_bound = min(unit['p_max_i'], unit['p_start_i'])\n            if current_p < high_bound:\n                inc_cost = unit['b_i'] + 2 * unit['c_i'] * current_p\n                inc_units.append((idx, current_p, high_bound, inc_cost))\n        inc_units.sort(key=lambda x: x[3])\n        remaining = target - total_p\n        while remaining > 1e-5 and inc_units:\n            idx, current_p, high_bound, inc_cost = inc_units.pop(0)\n            max_inc = high_bound - current_p\n            inc = min(max_inc, remaining)\n            p[idx] += inc\n            total_p += inc\n            remaining -= inc\n            new_p = current_p + inc\n            if new_p < high_bound:\n                new_inc_cost = units_info[idx]['b_i'] + 2 * units_info[idx]['c_i'] * new_p\n                inserted = False\n                for i, (_, _, _, cost_val) in enumerate(inc_units):\n                    if new_inc_cost < cost_val:\n                        inc_units.insert(i, (idx, new_p, high_bound, new_inc_cost))\n                        inserted = True\n                        break\n                if not inserted:\n                    inc_units.append((idx, new_p, high_bound, new_inc_cost))\n                    \n    elif total_p > target:\n        dec_units = []\n        for idx in on_indices:\n            unit = units_info[idx]\n            current_p = p[idx]\n            if unit['u_i_0'] == 1:\n                low_bound = max(unit['p_min_i'], unit['p_i_0'] - unit['p_down_i'])\n            else:\n                low_bound = unit['p_min_i']\n            if current_p > low_bound:\n                inc_cost = unit['b_i'] + 2 * unit['c_i'] * current_p\n                dec_units.append((idx, current_p, low_bound, inc_cost))\n        dec_units.sort(key=lambda x: x[3], reverse=True)\n        remaining = total_p - target\n        while remaining > 1e-5 and dec_units:\n            idx, current_p, low_bound, inc_cost = dec_units.pop(0)\n            max_dec = current_p - low_bound\n            dec = min(max_dec, remaining)\n            p[idx] -= dec\n            total_p -= dec\n            remaining -= dec\n            new_p = current_p - dec\n            if new_p > low_bound:\n                new_inc_cost = units_info[idx]['b_i'] + 2 * units_info[idx]['c_i'] * new_p\n                inserted = False\n                for i, (_, _, _, cost_val) in enumerate(dec_units):\n                    if new_inc_cost > cost_val:\n                        dec_units.insert(i, (idx, new_p, low_bound, new_inc_cost))\n                        inserted = True\n                        break\n                if not inserted:\n                    dec_units.append((idx, new_p, low_bound, new_inc_cost))\n    \n    schedules = np.array([u, p])\n    return schedules",
          "from": null,
          "gap_power_rate": 0.02101,
          "gap_price_rate": 0.039,
          "fitness": 0.03
     },
     {
          "name": "commit_units_by_priority_and_ed",
          "algorithm": "1. Classify units into must-on (min up-time not satisfied), must-off (min down-time not satisfied), free-on (online and free to turn off), and free-off (offline and free to turn on).\n2. Initialize commitment states: must-on units and free-on units committed, must-off units and free-off units decommitted.\n3. Compute effective min/max outputs considering ramp constraints: \n   - Online units: [max(p_min, p_prev - ramp_down), min(p_max, p_prev + ramp_up)]\n   - Started units: [p_min, min(p_max, start_ramp)]\n4. While total min output > load, turn off free-on units with largest min output to reduce over-commitment.\n5. While total max output < load, turn on free-off units with lowest (startup cost + min output cost) to increase capacity.\n6. Perform economic dispatch using lambda iteration to allocate load optimally among committed units, respecting min/max constraints.\n\n",
          "code": "import numpy as np\n\ndef commit_units_by_priority_and_ed(units_info, load):\n    n = len(units_info)\n    current_load = load[0]\n    \n    a = [unit['a_i'] for unit in units_info]\n    b = [unit['b_i'] for unit in units_info]\n    c = [unit['c_i'] for unit in units_info]\n    u_0 = [unit['u_i_0'] for unit in units_info]\n    p_0 = [unit['p_i_0'] for unit in units_info]\n    t_0 = [unit['t_i_0'] for unit in units_info]\n    p_min = [unit['p_min_i'] for unit in units_info]\n    p_max = [unit['p_max_i'] for unit in units_info]\n    p_up = [unit['p_up_i'] for unit in units_info]\n    p_down = [unit['p_down_i'] for unit in units_info]\n    p_start = [unit['p_start_i'] for unit in units_info]\n    t_on_min = [unit['t_on_min_i'] for unit in units_info]\n    t_off_min = [unit['t_off_min_i'] for unit in units_info]\n    s = [unit['s_i'] for unit in units_info]\n    \n    must_on = []\n    must_off = []\n    free_on = []\n    free_off = []\n    \n    for i in range(n):\n        if u_0[i] == 1:\n            if t_0[i] < t_on_min[i]:\n                must_on.append(i)\n            else:\n                free_on.append(i)\n        else:\n            if abs(t_0[i]) < t_off_min[i]:\n                must_off.append(i)\n            else:\n                free_off.append(i)\n    \n    u = [0] * n\n    min_eff = [0.0] * n\n    max_eff = [0.0] * n\n    \n    for i in must_on:\n        u[i] = 1\n        min_eff[i] = max(p_min[i], p_0[i] - p_down[i])\n        max_eff[i] = min(p_max[i], p_0[i] + p_up[i])\n    \n    for i in free_on:\n        u[i] = 1\n        min_eff[i] = max(p_min[i], p_0[i] - p_down[i])\n        max_eff[i] = min(p_max[i], p_0[i] + p_up[i])\n    \n    for i in must_off:\n        u[i] = 0\n        min_eff[i] = 0.0\n        max_eff[i] = 0.0\n    \n    for i in free_off:\n        u[i] = 0\n        min_eff[i] = 0.0\n        max_eff[i] = 0.0\n    \n    total_min = sum(min_eff)\n    total_max = sum(max_eff)\n    \n    free_on_sorted = sorted(free_on, key=lambda i: min_eff[i], reverse=True)\n    while total_min > current_load and free_on_sorted:\n        i = free_on_sorted.pop(0)\n        u[i] = 0\n        total_min -= min_eff[i]\n        total_max -= max_eff[i]\n        min_eff[i] = 0.0\n        max_eff[i] = 0.0\n    \n    free_off_sorted = sorted(free_off, key=lambda i: s[i] + a[i] + b[i]*p_min[i] + c[i]*(p_min[i]**2))\n    while total_max < current_load and free_off_sorted:\n        i = free_off_sorted.pop(0)\n        u[i] = 1\n        min_eff[i] = p_min[i]\n        max_eff[i] = min(p_max[i], p_start[i])\n        total_min += min_eff[i]\n        total_max += max_eff[i]\n    \n    committed_indices = [i for i in range(n) if u[i] == 1]\n    if not committed_indices:\n        p = [0.0] * n\n        return np.array([u, p])\n    \n    a_comm = [a[i] for i in committed_indices]\n    b_comm = [b[i] for i in committed_indices]\n    c_comm = [c[i] for i in committed_indices]\n    min_comm = [min_eff[i] for i in committed_indices]\n    max_comm = [max_eff[i] for i in committed_indices]\n    \n    low = min(b_i + 2*c_i*min_i for (b_i, c_i, min_i) in zip(b_comm, c_comm, min_comm))\n    high = max(b_i + 2*c_i*max_i for (b_i, c_i, max_i) in zip(b_comm, c_comm, max_comm))\n    \n    tol = 1e-5\n    while high - low > tol:\n        lam = (low + high) / 2\n        p_comm = []\n        for i in range(len(committed_indices)):\n            p_val = (lam - b_comm[i]) / (2 * c_comm[i])\n            p_val = max(min_comm[i], min(max_comm[i], p_val))\n            p_comm.append(p_val)\n        total_p = sum(p_comm)\n        if total_p < current_load:\n            low = lam\n        else:\n            high = lam\n    \n    lam = (low + high) / 2\n    p_comm = []\n    for i in range(len(committed_indices)):\n        p_val = (lam - b_comm[i]) / (2 * c_comm[i])\n        p_val = max(min_comm[i], min(max_comm[i], p_val))\n        p_comm.append(p_val)\n    \n    p = [0.0] * n\n    for idx, i in enumerate(committed_indices):\n        p[i] = p_comm[idx]\n    \n    return np.array([u, p])",
          "from": null,
          "gap_power_rate": 0.00018,
          "gap_price_rate": 0.06217,
          "fitness": 0.03117
     }
]